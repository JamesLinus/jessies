ChangeLog for Edit

2004-02-16 elliotth Bracknell

Improves the implementation of DisplayableMatchRenderer (but without fixing
the problem that with Java 1.5, the two lists in the Find/Replace dialog
look different).

2004-02-11 elliotth Bracknell

Fix the RubyDocumentationResearcher in cases where the user doesn't have 'ri'
installed. (Although Ruby programmers should have it, we might still be looking
for Ruby documentation because the user's typed something in the advisor's
text field.)

2004-02-10 elliotth Bracknell

Couldn't let a month go by with no changes, so I've modified the shell
script to take an optional "1.5" parameter. Supply that, and at work at
least, you'll get Java 1.5 (if only all platforms were as sensible as
Mac OS when it comes to concurrent versions of programs, I could do this
properly). Regardless of where you are, I've changed ETextArea to work
around the change from "typed \010" to "BACK_SPACE" in Java 1.5.0beta1.

Java 1.5 is faster than 1.4.2 to a sufficient degree that I keep thinking
something's gone wrong, because things are too smooth.

Stops ChangeFontAction accessing a static method on an instance. Bad style.

2004-01-11 elliotth Bracknell

Adds a "fixedFont.default" property so you can choose to have fixed fonts
by default without breaking the fixed/proportional font menu items and
generally lying to Edit.

Ensures that the caret remains visible when you switch between
fixed/proportional fonts, regardless of how different their sizes are.

Fixes Workspace-selection lossage caused by yesterday's attempt to cope more
uniformly with ~.

Fixes Ruby advice, at least if you have Ruby 1.9 installed. (And it only
really looks good if you have my HtmlFormatter patch to 'ri', but I've
submitted it, and we'll see...)

Switches back to jikes, and fixes everything my "Effective Java" warnings
complain about.

2004-01-10 elliotth Bracknell

Added FileUtilities.fileFromString to hide the nonsense relating to parsing
of filenames beginning with ~, and went through replacing calls to "new File"
with calls to this, in the hope that our support for ~ will be more uniform.
(I got caught out by not being able to create a workspace whose root is
relative to ~. Not if you want the workspace to work normally, anyway.) This
kind of thing should now be fixed, as long as we don't add new "new File"
calls.

Removed some dead code.

2004-01-06 martind Bracknell

"default" is as reasonable a label as "case".

2004-01-06 elliotth Bracknell

Replaced the use of alpha for drawing the 80 column margin with the use of
XOR. Alpha was fine on Mac OS X, where it's free, but on Linux it's expensive
enough that martind noticed and complained. I couldn't get XOR to work
properly, but Ed said:

  me neither; the colour that comes up is rarely the one i'd have expected.
  i thought your error was forgetting to reset the graphics to normal mode,
  but it's not, it's your choice of lightGray for the graphics context current 
  color, and darkGray for the line.

  according to the docs "When drawing operations are performed, pixels which
  are the [graphics context's] current color are changed to the specified [XOR] 
  color, and vice versa ... Pixels that are of colors other than those two 
  colors are changed in an unpredictable but reversible manner."

  since the grey line falls between two letters, it's going to be a (mostly) 
  white column, so this works:

    g.setColor(Color.LIGHT_GRAY);
    g.setXORMode(Color.WHITE);
    g.drawLine(x, 0, x, getHeight() - 1);

  the WHITE pixels go LIGHT_GRAY, giving a LIGHT_GRAY margin line, and the red 
  caret changes (unpredictably!) to a dingy red, which is probably the normal 
  red + LIGHT_GRAY. where the line does cross text (which is only on very few 
  characters, e.g. '_' in the monospaced font i get) it goes dark gray, very 
  probably BLACK - LIGHT_GRAY, which is still readable.

While I was there, I went through Edit and changed all Color constants to
use the capitalized forms. It's been a long time since we needed to use the
old names. I can't wait until the day I can go through Edit switching to the
enhanced for loop. (If they'd called it forEach, we wouldn't have to use such
a silly word as 'enhanced' when we want to refer to it.)

2004-01-04 elliotth Bracknell

Finally got round to writing
StringUtilities.readLinesFromFile, which
is what you usually want when you call
StringUtilities.readFile (and then end up
invoking split("\n") to get your array).
So nearly every invocation of readFile
is now readLinesFromFile, and of the
remaining two, one is in pretty much dead
code (HtmlViewer), and the other isn't
obviously the right thing to do (ETextWindow):
I think there we *need* the exceptions to
report back to the user. With the latter
in mind, I've changed the behavior of both
methods to be that they throw a RuntimeException
on failure. Which is what all the java.io
stuff should have done in the first place:
let me write correct code, but don't try
to force me to do so (a) in the wrong place
or (b) when I'm in a hurry.

Started to use my summarized JavaDoc. First
up, we have lists of links to classes when
your caret is at the end of an "import"
statement (why not anywhere in the import
statement?).

Use the summarized JavaDoc to offer links to
method (or field) documentation. Currently
doesn't work well on Mac OS because it looks
like [NSWorkspace openUrl:] doesn't cope with
the use of #target in a file:// URL (an http://
one is fine). Certainly open(1) is broken, as
are osascript -e 'open location ...', and
com.apple.eio.FileManager.openURL from Java.
I couldn't actually be bothered writing any
Objective-C to test my hypothesis. I submitted
a bug instead.

2004-01-03 elliotth Bracknell

Automatically selects a fixed font (instead
of the user's default font) when opening a
file containing mixed tab-and-space
indentation. This is only a very simple
heuristic, but would be a good place to put
proper indentation-guessing code when we
get round to it.

2004-01-02 elliotth Bracknell

Improves TagsPanel slightly. Copes better with
Ruby tags (now I've improved Exuberant ctags'
parsing of Ruby to the point where it's not
wholly useless). No longer inserts separate
leaves in the tree for non-class items that
have branches (such as Ruby modules and C
enums and structs).

2003-12-28 elliotth Bracknell

Remembers dialog size and location so that
we can put the dialog back where it was (despite
the fact that they're re-created from scratch)
each time it's shown. This is stored across runs,
at the cost of me wasting half an hour fighting
MessageFormat in an attempt to do things
properly, then giving up and doing something
easy but ugly.

Sorts the Java researcher's field and method
lists alphabetically.

Provides a link to the package summary
documentation when you're pointing at an
"import" statement. Not perfect, but better
than what we've had to date.

Adds recognition of Objective-C++ as another
member of the "C++" family (i.e. a member of
the C family that isn't Java, which is
important enough to get special treatment).

Draws a vertical gray line at the 80-column
mark if you're using a fixed-width font. This
is handy for keeping out of mischief when
making changes to open source software, which
is also the main place we see mixed tabs and
spaces, and weird ASCII art and other things
that make life difficult for people using
proportional fonts.

2003-12-27 elliotth Bracknell

Removed the duplicate (but non-identical) code
from the various researchers for extracting the
text to be examined, and put good code in Advisor
itself. (This code is slightly questionable, to
my mind, because if there's no selection, it
takes the text up to the caret. This means that
if the caret is part-way through JList, say,
you don't get any meaningful help, even though
it's obvious to a human what's relevant. Worse,
if your caret is before the 's' of Collections,
you get the documentation for Collection instead.
I don't have a better idea, so I'll accept this.)

Changing the Advisor code un-broke a bunch of the
Java researcher's functionality.

I fiddled with the output of the Java advisor to
improve its readability, removing the redundant
'abstract' modifier from interfaces, removing the
modifiers from all methods (which seems in practice
to be a better idea than it sounds like in theory),
removing a spurious space inserted between
constructor names and their parameters, and moving
the return types of methods to the end, in the
style of the 'pickaxe' Ruby book. It's not Java
syntax (and neither is it Ruby, funnily enough),
but it makes the method names stand out far better
without resorting to the use of right-alignment
and a table (as in Sun's JavaDoc), which has the
problem of requiring quite a bit of space.

All the character- & String-fiddling I came across
got rewritten to use regular expressions. There
may have been some behavior lost or changed, because
some of the old code's intent was unclear, lost in
the details of strings and indexes. I'm not too
bothered by this because, as I said, I've unbroken
several things, so we win overall even if I have
missed something.

The out-of-control overloading of makeLink and
makeLinks has been mostly replaced with
distinctly-named methods (though there are still
two makeClassLink methods). Why do languages
give us overloading and their evil twin (default
parameters) when the only responsible way to use
them is to avoid them completely? (Probably, like
operator overloading, for the benefit of
mathematicians.)

I also changed JavaDoc.getPackageInfo to make
it clearer that it's not implemented. (There's
code there, but it's commented out, and it's
not obvious to me what state Ed left that in,
or what his plans for it were/are.)

InsertInterfaceAction hasn't become any clever
with respect to working even if you've typed
a closing parenthesis or opening brace or whatever,
but it does now use a CompoundEdit so that all
the computer's input gets treated atomically by
undo.

2003-12-21 elliotth Bracknell

Changed the dumping of misspelled words on
quit to output a sorted list with no duplicates, and
a count of how many words it contains.

Removed the code that accepted words if ispell
suggested a hyphen; it was letting way too much
junk through.

Implemented FilenameChooserField, which combines
a JTextField for entering a pathname with a JButton
that opens a file dialog for choosing a pathname. You
can choose whether you want to select files or just
directories. You can also provide a companion name
field, which gets updated with the leafname.

Changed AddWorkspaceAction to use this new
component instead of just a text field. Now if only
Swing's JFileChooser (which FilenameChooserField
uses) didn't suck so hard...

Changed NewFileAction to use this new component,
as a way of letting you see what's in a directory (which
is something I often want to know when I'm at this
point). It's still not the interface I want, though I'm not
sure what that would be. Maybe if Swing's
JFileChooser didn't suck so hard...

Sian's birthday. Ed in Bracknell, agreed that having
the tags panel in an open-quickly-like dialog, with
the same filtering/searching functionality, might have
some merit after all. Still not clear what to do with the
advisor if this happens though.

2003-12-19 martind Bracknell

Fixes the file type determination such that not all
#! scripts are assumed to be Ruby.  Adds a Perl file
type for the sake of auto-indenting Perl in the style
of the other brace-based languages - C++ and Java.
 
2003-12-19 elliotth Bracknell

Adds code to accept misspellings if ispell suggests
a correction involving just adding a hyphen. This means
that Undoable, Editable, Keymap and the like are no
longer considered wrong. It does over-generalize like
a 5 year old, though. *Configureability is now considered
okay, though configurability is considered wrong. And
it's quite easy to make words up. Throwable is fine,
but *Consideredable? We're going to have to decide
whether we want a solution that requires little input
from us but does offer plenty of opportunity for false
negatives (i.e. this code), or a system that requires us
to enumerate acceptable combinations but which
won't be prone to accepting just *aboutability *anythingness.
"oundssay ikelay igpay atinlay," as Dr. Gonzo would say.
(*atinlay is considered okay too, presumably as at-in-lay).

Adds a couple of JavaDoc tags to the Java keywords file.

2003-12-15 elliotth Bracknell

Added a few more identifiers from the Standard C++ library.

2003-12-14 elliotth Bracknell

Despite the fact that I'm planning on making FindFilesDialog
non-modal and removing its OK and Cancel buttons, until I
do so, I ought to fix the ClassCastExceptions when you click OK
since we started remembering MatchedFiles rather than Strings.

Prevents an exception being thrown when reverting to saved
when JTextComponentSpellingChecker got confused trying to
check from 0..0 (and ended up trying to examine the character
at -1). When choosing a toIndex, we also need to ensure it's
greater than toIndex.

2003-12-12 elliotth Bracknell

Added some of the standard functions, macros and types from
the 1998 ISO C++ standard. I've missed out the stuff I've
never used (like the multi-byte character stuff), and the stuff
I should be scared of (like sprintf). Note that this only covers
the C library (i.e. tables 95, 97 and 99). So std::ostringstream
and std::setw and basic_string's substr are all still marked as
errors. Anyone care to do the C++ library (which doesn't seem
to have a handy table of its uglyisms)?

2003-12-11 elliotth Bracknell

If we open the FindFilesDialog from the context menu,
fill in the filename pattern field too, so we search from the
current file's directory down.

Shows when we're searching. There's no Java
equivalent of Cocoa's "asynchronous activity
indicator", so I just used a JLabel.

Shows the number of matches in each file.

Automatically highlights the matches when the
user double-clicks to open one of the files. Jumps
to the first match.

2003-12-09 elliotth Bracknell

Shows search matches as they're found, rather
than all at once, at the end. I've no idea why I
didn't do it like this in the first place. It's easier,
and sounds like exactly what you'd want. I guess
I thought we might be fast enough to be fully
interactive if I didn't waste time redrawing the
UI, but wouldn't make it if I dallied.

Adds JAVA_HOME to the list of environment
variables to explicitly pass through (roll on
Java 1.5, where we may not need to do this!).

2003-12-08 elliotth Bracknell

Fixes an error in the spelling checker code that
tries to avoid trailing apostrophes: if you typed
"#!/usr/bin'", it would go into an infinite loop
in JTextComponentSpellingChecker.checkSpelling
because 'finish' would be less than 'start' when
we try to skip the too-short word using continue.

2003-12-05 elliotth Bracknell

Changes SpellingChecker to accept a word if ispell
suggests we've got the capitalization wrong. When
programming, the programming language's naming
conventions are more important than any natural
language orthography.

Adds suggested spelling corrections to the context
menu. I wasted about an hour trying to track down
a problem that ended up being because an API
wasn't using any kind of Range object, it was using
two separate int parameters. Which I thought were
start and end when they were actually start and
length. Grr!

Corrects the spelling checker behavior with respect
to apostrophes.

Improves the spelling checker's communication with
ispell, both in terms of what it sends and also in terms
of correctly handling more (all?) of the possible
responses.

Removes the last of the lexical coloring junk.

2003-12-04 elliotth Bracknell

Factors out the commonality between the TextAction
subclasses that work on the selection.

Adds "Open" to the errors window's menu as well as
the normal text windows' menus.

2003-12-02 elliotth Bracknell

Changes the other field in the find files
dialog to be a filename pattern as in
the open quickly dialog. Given that we're
always working with a complete list
of files, we may as well offer full
generality (it's slightly easier to implement,
too).

2003-12-01 elliotth Bracknell

Added feedback to the FindFilesDialog so
we can see when we're searching and when
we've finished.

Made Workspace.scanDirectory ignore
symbolic links to files. This is rather expensive,
and means that it now takes three times as
long to scan a repository on Linux.

Made FileSearcher quite a bit faster (down to 6.1s
from 7.7s on my largest work repository) by not
finding line breaks using a Pattern, and effectively
implementing indexOf for CharSequence.

2003-11-30 elliotth Bracknell

Made FindFilesContainingSelectionAction work
on the errors window as well as files. We now
use a SwingWorker subclass to do the searching
without blocking the UI. The code to abort an
in-progress search isn't right though.

2003-11-28 elliotth Bracknell

Improved the speed of FileSearcher, though
it's still not competitive with GNU grep. The
comment in the FileChannel JavaDoc about
memory-mapping being more expensive than
just reading in the file if the file's smaller than
a few tens of kilobytes doesn't seem significant
in practice on Linux.

At the moment, the functionality is rather
like "grep -l". Needs work. And probably needs
to be faster if we're going to use it at work. (We
can search all the Edit source in 150ms, but
the code base I use at work takes 7200ms,
which is a bit slow for search-as-you-type.)

2003-11-27 elliotth Bracknell

Changed the list of uninteresting directory
names from a ;-separated list to a regular
expression. Less code, more functionality.
But we will all have to change our properties
files.

2003-11-24 elliotth Bracknell

Martin noticed that we don't put the little
"switch to counterpart" icon in the title bar
until a text receives focus. This is silly and
can be slightly misleading, so -- given a choice
of doing it in ETextWindow's constructor or
in ETextWindow.fillWithContent -- I've done it
in the latter. (It's a bit nasty that the
logic for this is in e.gui.ETitleBar, but
who cares enough to fix it? And is it broken
anyway, if we stop pretending that e.gui
contains anything other than support for Edit?)

2003-11-12 elliotth Bracknell

Disabling "Open Quickly" was a bad idea, because
you get too used to typing C-S-D "filename", and
really don't want to type "filename" into a document
just because C-S-D won't work yet. Instead, I've
taken to bringing up an alert. It's the simplest
solution, and this isn't something that should
happen very often, so I'm not going to put more
effort in to it now.

2003-11-11 elliotth Bracknell

Changed the pop-up menu's "Open" action to
bring up the "Open Quickly" dialog with the
currently selected text as the contents of
the text field. Using the "Open Quickly" dialog
normally retains the previous value of the
text field.

Adds a "Rescan" button to the "Open Quickly"
dialog.

Disables "Open Quickly" until the workspace
has been scanned.

2003-11-05 elliotth Bracknell

Converts paths recognized as links in the
errors window so they start with ~ if they're
in your home directory, rather than with
the value of "user.dir".

Fixes the "File Properties" dialog. It was failing
when EndOfLineStringProperty on a Document
was null. (You need to get the line.separator
system property in that case.) Presumably
JTextPane was always setting this?

Fixes the FindAndReplaceAction to use Sun's
Matcher.replaceAll code; ours had a problem
where the regular expression was "$".

2003-11-04 elliotth Bracknell

Adds support for files in EDIT_HOME called
keywords-C++, keywords-Java and keywords-Ruby
that contain a list of words (one per line)
of words to ignore when checking spelling for
the relevant kind of file.

Improved the efficiency of the spelling checking
code to better cope with a 37 MByte file Martin
tried to open. Also improved robustness by not
asking ispell to check very long words. Although
you can now load half a million lines, totalling
37 MBytes of text, I strongly recommend you
don't, because it takes tens of seconds and is
really sluggish even once it's loaded.

2003-11-03 elliotth Bracknell

Rewrote the spelling checker to not use Segment,
which I obviously don't understand, and use String
instead. Fixed several mistakes in the old
implementation. Also made the code more robust
in the face of unexpected Exceptions (it's a really
bad idea to let an Exception propagate out of a
DocumentListener if you value your data).

2003-11-02 elliotth Bracknell

Adds code to cope with checking the spelling of
identifiers containing acronyms, such as IOException
and HTTPConnection. Also code to ignore 's on the
end of a word.

2003-11-01 elliotth Bracknell

Falls back to "aspell -a" if "ispell -a" isn't available. ispell
is preferred, because it's a lot faster.

2003-10-31 elliotth Bracknell

Adds simple spelling checking, where misspelled words
will be highlighted with a one-quarter alpha red rectangle.
A more traditional "misspelled word" highlight painter might
be nice, but it's not my highest priority. I'm mostly interested
in seeing how good a job of checking spelling in code we
can do.

Invokes setDragEnabled(false) in ETextArea's constructor,
because I have a morbid fear of drag-and-drop text editing.
(Mac OS X, contrary to the JTextComponent JavaDoc, sets
this to true by default.) I can't stand it, so you can't have it.

2003-10-28 elliotth Bracknell

Changed Edit.createWorkspace to ensure that workspaces
are in alphabetical order, which should hopefully be sensible
enough that we don't feel the urge to have complete control
over ordering.

Prevents the setting of zero-length tooltips when there are
no captured groups. This looks silly (there's a tiny little empty
tooltip appears, rather than no tooltip).

2003-10-27 elliotth Bracknell

Fixed the error that was preventing "Remove Current
Workspace" from working (because the errors window
was counting as an open window, and you can't
close it). Ruth's birthday.

2003-10-24 elliotth Bracknell

Adds a preview of the proposed replacements
in the Find/Replace dialog. The UI isn't quite
right; hopefully Ed can help with that.

2003-10-23 elliotth Bracknell

Backs out of the setDrawsLayeredHighlights change;
the appearance wasn't always right, and in the end
I decided that looked worse than never highlighting
to the right margin.

2003-10-22 elliotth Bracknell

Adds tooltips to the Find/Replace dialog showing the
captured groups and their values. I would really like
a ListCellRenderer that shows the groups, but this is
a pretty good (and easily implemented) work-around.

Fixes the problem where C-R wouldn't bring up the
Find/Replace dialog until after the user had opened
the "Find" menu at some point. The "fix" is to add
a key binding to ETextArea, and a FindAndReplaceAction
instance to its actions array. But I can't help thinking
that this symptom (of it working if you'd seen the menu)
must be a hint that there's a better solution, one that
would let us remove all the action/key binding nonsense
from ETextArea?


2003-10-11 elliotth Bracknell

Fixed "Revert to Saved" so that it restores your caret position
after reversion.

Made ETextArea.setFont check to see if it's being given a
proportional or a fixed-width font. If it's fixed width, set
the tab size to eight characters, as Allah intended. If it's
proportional, make it 2, because that's multiplied by a wide
character (look it up yourself).

2003-10-02 elliotth Bracknell

DocumentUndoFilter only works with DocumentEvents, and
PlainDocument doesn't use those. So let's go back to
having each keystroke an individual undoable event for
now. I found an old changelog comment (2003-03-09) that
shows that the switch to JTextPane (where you would get
DocumentEvents) happened on the same day as we started
using DocumentUndoFilter, though there's nothing in the
comment to suggest that wasn't just coincidence.

2003-10-01 elliotth Bracknell

Disables syntax coloring. Switches back to JTextArea,
so things are now *much* faster (like going from MSIE
to Safari), and we can cope with much larger files.
I just opened a 13 MByte file, and it took a few
seconds, but was otherwise fine. The largest source
file I have (discounting auto-generated ones, the
largest of which is 12 MBytes), is not a problem,
though the color Edit couldn't have loaded it (!).

2003-09-30 elliotth Bracknell

Automatically fills in, for a new file called "SomeClass.h"
the following:

#ifndef SOME_CLASS_H_included
#define SOME_CLASS_H_included



#endif

because I'm sick of wasting my time typing this when the
computer can do every bit as good a job.

2003-09-26 elliotth Bracknell

Fixes storing/recalling of caret positions for files
containing tabs. Since we strive for emacs (and thus
grep, jikes, and gcc) compatibility when accepting
column offsets as input, we're also forced to output
column offsets in emacs' retarded manner.

2003-09-24 elliotth Bracknell

Fixes an error where ShellCommand was sometimes
using the current workspace rather than the workspace
it belonged to. In particular, you could end up with the
horizontal "end of task" rule drawn in the wrong
errors workspace if you switched workspace while the
task was running.

Fixes the error introduced by putting caret positions in
open-file-list that meant we weren't selecting the whole
line when clicking on grep/compiler output. We now
differentiate between file.cpp:12: (like you get from grep or gcc,
and which means "select the line") and file.cpp:12 (like we
write to the open-file-list, and which means "position the
caret").

2003-09-23 elliotth Bracknell

Changes "Open Quickly" so that no selection no
longer behaves as if everything's selected. If
there's only one match, that's automatically
selected. So most of the old convenience should
be there, but you're protected from yourself (Ed!)
if you're too hasty. Ideally, the Form should
have a disabled default button unless there's
a selection, but our forms stuff doesn't support
that at the moment.

Ed pointed out that "Open Quickly" would open
everything, not just the selection, if you hit
Return after bringing the dialog up without
typing anything new. Even if you'd made a specific
selection with the mouse. Fixed by taking the line
that set 'haveSearched' to false out of the code
that shows the dialog and moving it into the
constructor. Whether or not we 'haveSearched' must
be persist if the search results persist.

2003-09-22 elliotth Bracknell

Updates the "Open Quickly" file list when you use
File>New to create a file. This initiates a complete
re-scan rather than just adding the file, which is
perhaps unwarranted. The worse problem is that we've
still no way of recognizing new files produced by
running "bk pull" or "cvs update" from the shell,
say.

2003-09-21 elliotth Bracknell

Remembers the caret position in the files you've got
open when you quit Edit, so the caret can be put back
where it was when you re-start Edit.

2003-09-19 ed Basel

Fixes a bug introduced by misunderstanding the intent
of ignoring the Exception in JavaDoc.getClasses: it
was supposed to be specifically ClassNotFoundException,
and one of those just means that we haven't yet guessed
the right package for the class we're looking for.

2003-09-02 elliotth Bracknell

Improves the Ruby scanner to correctly recognize global
variables (those starting with $) and multi-line string
constants. The list of reserved words now matches those
in the Pickaxe book. Adds support for '-delimited strings
as well as "-delimited ones.

2003-08-30 elliotth Bracknell

Makes the new Ruby scanner the official one. (I should
rename ScriptLexer RubyLexer, and I should junk all the
Token classes in favor of one true simple Token class
supporting the few kinds of token we actually distinguish.)
It's still not perfect, but it's pretty darn good, and
a lot better (if less general-purpose) than the old
ScriptLexer. If it ever seems worthwhile, the
comments-and-string-literals part of RubyLexer could be
pulled out into a new ScriptLexer.

2003-08-29 elliotth Bracknell

Switches to an experimental port of a GNU flex scanner for
Ruby.

Ensures that drawing a horizontal rule in the errors window
counts as auto-scrollable output, so if a command doesn't
produce any output, or if we're unlucky in the amount of
scroll-ahead a previous line of output caused, we still
always get to see the horizontal rule marking the completion
of a command.

2003-08-28 elliotth Bracknell

Makes Open Quickly a bit cleverer. I found myself starting
to trust it too much, and stopped waiting for it to see that
it had got the right matches. For example, just typing a
unique name and hitting return.
This didn't work because it *only* searched when the timer
expired, which it may not have had chance to do. We now keep
track of whether the search results are up-to-date with respect
to the text field. If the dialog is accepted, we ensure that
we have up-to-date search results before opening any files.
This prevents both the case where you end up with nothing
opened, and where you end up with the results of the last
search being opened.

2003-08-27 phil.norman Basel

Tells the text areas' DefaultHighlighters to draw a highlight
to the right margin (rather than stopping when the text runs
out). It doesn't seem to work while you're sweeping out a
selection, but as soon as you let go, it's right. On the whole,
I prefer it like this. It's closer to the Right Way.

2003-08-26 elliotth Bracknell

Always scans workspaces for files if they're below the user's
home directory. This means that I don't have to have a fake
Makefile in my javac directory, and Ed's edit directory should
be fine too.

2003-08-24 elliotth Bracknell

Ensures that we don't show leading File.separator characters in the
Open Quickly dialog. Shows when we start scanning for interesting
files, as well as when we end. Changes OpenQuicklyDialog to work on
a Workspace, rather than a fixed root directory and list of files;
this lets it query for both whenever it needs them, which we take
advantage of by switching to scanning files in the background. This
means that we start up a lot faster if you've got large projects
not in cache, but that there will be a gap before Open Quickly will
work. At home -- where I have javac, jikes, gcc, Linux and Edit to
scan -- this gap is too small to be a concern. At work it could be
noticeable (after an overnight build; Linux's file system cache may
be good, but it's not cunning enough to start bringing things back
in after being forced to chuck them all out and then left idle for
an age), so some proper indication of whether we're ready might be
a good idea.

Fixes a couple of exceptions that had been appearing in the log
since forever but which weren't a real problem (the failure to
select anything if you double-click in an empty text, and the
TagsPanel NullPointerExceptions).

2003-08-22 elliotth Bracknell

Makes Open Quickly case-insensitive.

Copes with non-existant workspace roots. Skips roots that don't look
like projects (no Makefile or build.xml, and no CVS or SCCS directories).

Makes the text field in Open Quickly as wide as it used to be. Misses
off the workspace-root prefix from the list of filenames.

2003-08-21 elliotth Bracknell

Here's another one for the "should have done this a long time ago"
list: I made Open Quickly work on a cached list of files. So it
rips through even the 15k files in one of my work repositories,
happily doing search-as-I-type, the way it should be. With a warm
file system cache, it takes just over a second to produce the list
at start-up, which isn't too bad.

2003-08-21 martind Bracknell

Fix to JavaIndenter's handling of switch statement cases' ":" v C++
namespaces' "::".

2003-08-20 elliotth Bracknell

One last (?) bug in the Ruby indenter: rescue (like catch in Java)
can have trailing text describing a specific exception.

2003-08-18 elliotth Bracknell

Improves RubyIndenter by making it recognize things that should
cause outdent (else, elsif, end, et cetera). This is done in
the stupidest way possible, and we'll see how expensive that
turns out to be in practice. Martin's quite gung-ho about correcting
indentation on every keypress, but I think we'd need to never make
a mistake before that became a good idea. As it is we can scrape
by just not making life more difficult than it was already.

2003-08-16 elliotth Bracknell

Catches exceptions thrown when trying to perform a find/replace,
tells the user, and takes them back to the find/replace dialog.

Adds a simple ScriptLexer, suitable for Ruby, Perl and bash if
all you want is for #-to-end-of-line comments to be shown in
green. It's not even clever enough to recognize # in a string
or character literal. I may fix that when it bites me.

2003-08-15 elliotth Bracknell

Actually implements 'electric characters', a generalization
of the old magic you saw with '}', where typing one would
cause the line's indentation to be corrected. Try typing in
a piece of C and marvel at how preprocessor stuff magically
does the right thing.

2003-08-15 martind Bracknell

ETextArea.getPreviousNonBlankLine now returns 0 if
it can't find a previous non-blank line.

JavaIndenter.getActivePartOfLine fell for the old assumption
that string functions modify the immutable strings they're
called on. Ruby's explicit distinction between name and name!
for non-modifying and modifying operations works pretty well.
elliotth has yet to make this (common in Java) mistake in Ruby.

JavaIndenter (which is used for all the C family) now outdents
preprocessor directives to column zero. This doesn't cope with
nested preprocessor directives. But then neither do humans all
that well.

Preprocessor directives no longer upset the flow of indentation,
going back to a "definitive" line rather than just the first
non-blank line.

2003-08-15 elliotth Bracknell

Changes BirdView's marks from red to black. Red kept
confusing me and making me think I'd got unsaved files.
Yellow (to match the highlights) doesn't work when covering
so few pixels. Orange likewise. So black it is; I can't be
bothered to try any more colors, and black seems okay.

2003-08-13 martind Bracknell

Various indentation improvements.

2003-08-12 martind Bracknell

Changes ETextArea.getPreviousNonBlankLineNumber to start
looking at the previous, rather than current, line number.

2003-08-12 elliotth Bracknell

Adds checking of EDIT_HOME_SERVER to the 'vi' script. If this
is set, that's where 'vi' will try to open your files, rather
than localhost.

2003-08-08 elliotth Bracknell

Stops the Advisor wasting time by asking the Researchers if
they know anything about the null selection.

Adds a Ruby class to output an HTML version of the output
from 'ri'.

2003-08-06 elliotth Bracknell

Improves the isCPlusPlus test to look for
emacs-style "-*- C++ -*-" on the first line, which means
we correctly guess GNU header files such as <string> where
there's no extension to guide us. Also look for "#ifndef" on
the first line, which is a mostly reliable indicator of Cness.

2003-08-05 elliotth Bracknell

Changes the Advisor so that -- as originally intended -- it
collects all the available advice. (The actual change was to
JavaWorkspaceResearcher, which was putting in a "</html>"
tag, meaning that any advice added after this would just
disappear.)

Changes the Advisor and Researchers so that you only
get relevant advice. This means that C++ programmers
won't have Edit slow down while it checks Sun's web site
for Java documentation because you've typed Array, say,
nor will a Java programmer be offered information about
Ruby's Array class (and vice versa).

Adds a Ruby Researcher that uses the 'ri' tool:
  http://www.pragmaticprogrammer.com/ruby/downloads/ri.html

Makes ETextWindow.isRuby clever enough to know that
not all Ruby files have a ".rb" suffix, and check for a relevant
use of "#!" at the start of the file.

2003-08-03 elliotth Bracknell

Changes LinkFormatter to only process a color escape or an
address for each iteration of the loop in appendLine. It's wrong
to try and make use of the other regex's match because each
operation actually modifies the string. An alternative would be
to keep an index into the line from which to search next, rather
than substringing the line. I'll worry about that when performance
of that code matters.

Gives space to the window below the current window if you close
the current window. I've been thinking for some time that this might
be nice. Camino's download manager window works this way, and
that's just how I'd want it, so there's some precedent.

Fixes the horizontal rules in the errors window for tasks that don't
produce any output (previously there would be no newline following
the rule, so the next line of text would be on the same line and take
some of the space away from the rule on the right hand side; it
worked fine for ant, which is quite noisy, so I didn't notice).

Fixes the tab width (again?!) so that mixed tab-and-space source
looks okay. Tabs are 8 characters wide, but I've chosen 'l' rather
than 'X' as the prototype. This means you get exactly what you
want in fixed-width mode (which you probably want if you're using
mixed spaces and tabs) and a reasonable compromise in
proportional mode.

2003-07-31 elliotth Bracknell

Stops clearing the errors window on build. Appends a horizontal
rule when a task completes.

2003-07-27 elliotth Bracknell

Fixes the problem where typing a closing brace anywhere
other than at the start of a line would cause the indentation
to be messed up. Separates the notions of correcting the
indentation and auto-indenting.

Fixes auto-indentation in the case where some other editor
has stripped trailing space from a line. We now search back
until we find a line to copy indentation from.

Adds Ruby auto-indentation. Although there's a hard-coded
regular expression in ETextWindow, the mechanism is general
enough that -- when we've another language we want to
support -- we can add a single line for it, or move this
language-specific stuff out somewhere. What we don't do is
recognize that files starting #!/usr/bin/ruby but whose filenames
don't end .rb are still Ruby files, nor do we auto-outdent "end".

2003-07-25 elliotth Bracknell

Auto-scrolls the errors window until a link is found, from
which point on the window won't scrol. This seems to work
pretty nicely, though it does leave the first link ('error')
at the bottom of the window, which is probably wrong. Let's
see that it works first, though...

2003-07-23 elliotth Bracknell

Adds a new environment variable EDIT_CURRENT_LINE_NUMBER
that lets us, for example, have an external tool that starts
bk revtool (I've modified my copy) on a particular line in
the current revision. So you can go straight from a line in
the editor to the corresponding line in the revision history
tool.

Prevents the LinkFormatter from mistakenly assuming that
comments (either //, /* or */) are parts of paths, just
because they contain '/'.

Rewrote LinkFormatter with markusl's help to use a regular
expression for matching addresses. I don't know if it's
quicker/slower or more/less space efficient, but it's a
lot shorter. (Or will be when I remove all the commented-out
code.)

Added support for ANSI color escapes to LinkFormatter.

2003-07-22 elliotth Bracknell

Ensures that the MinibufferUser is notified of the
last change to the text before it's told that it's
been accepted, so users such as FindAction can search
if you just type and hit return without having to
have any extra code.

Disables 'Open' and 'Execute' on the context menu
if there's no selection. Removes some long-dead code.

2003-07-19 elliotth Bracknell

Changes LinkFormatter to rewrite paths starting with
your home directory to start ~/ instead for brevity's
sake. (I find myself making more extensive use of the
errors window now it's a permanent fixture.)

Gives Find/Replace its own keyboard equivalent, C-R.

2003-07-18 elliotth Bracknell

Removes the "won't open a symbolic link" warning,
because it's not really important: when would you
ever really want it to do otherwise?

Stops counting the errors window as an open window
for the tab title's open window count. Now we always
have an errors window, this was annoying (and weird,
too, because the assumption that you start at 0 no
longer held).

2003-07-17 elliotth Bracknell

Adds a man page researcher so I can stop opening an rxvt
window to find the order of the parameters to memset, or
to check (again) that -- despite taking an int parameter --
it only pays attention to a single byte within that, and if I want
a repeating 32-bit pattern, I'll have to do that myself. Anyway.
The list is read from a file in $EDIT_HOME. There's a line of
shell to generate this for your system in ManPageResearcher.java,
which we could re-implement in Java, or run from the edit
start-up script. But I'll wait for someone to complain first.

Removed the invokeLater code, because it was working far worse:
the reason we were waiting is because we need to add some text
to the errors window. For now, I've changed to having the errors
window always visible (it's lost its title bar). I'm not sure I
like this, but we'll see how it goes (or wait for someone to
come up with a better fix).

Changed invokeAndWait to invokeLater in
Workspace.ErrorsWindowCreator.createErrorsWindow, but I'm not
sure it's really any use. Martin had a deadlock where we had two
StreamMonitor instances trying to write to the errors window at
once, and he was trying to pop up a menu. The EventDispatchThread
was doing the menu popping-up and (for some reason) waiting
for a lock on the Workspace. One of the StreamMonitor threads was
also waiting for a lock on the workspace. Meanwhile, the other
StreamMonitor had the lock on the Workspace but was waiting for
the event queue because of this invokeAndWait. Maybe the whole
errors-reporting thing needs to be done differently?

2003-07-15 elliotth Bracknell

GTK+-related fixes. We don't try to be overly clever in BirdView any
more, and we try to work around the GTK+ LAF's ignorance of
internal frames in ETitleBar (where we were otherwise hoping to
find a suitable set of colors for our titlebars).

2003-07-11 elliotth Bracknell

Uses MinibufferUser.isValid to set the minibuffer text color to black
or red, depending.

Implements GotoAction.isValid properly. Adds a dialog if you (despite
the red) try to go to a non-existant line.

Fixes the frame icon, which had been broken since I moved the classes
into their own classes/ directory, I assume. Makes no difference to
Mac OS X or Linux with WindowMaker, but KDE's Alt-Tab shows icons, and
it's better if not everything looks the same. Presumably this fixes
Windows too, but I'm not sure anyone uses it these days.

2003-07-10 elliotth Bracknell

Fixed the 'edit' script to actually set up a default set of preferences,
and to not assume that ~elliotth/download/ contains Java 1.4.2.

2003-07-07 elliotth Bracknell

Ed broke the text field attached to the advisor window, by assuming
that researchers only get to look at selections in ETextArea objects.

2003-07-04 elliotth Bracknell

Fixed an annoying bug that stopped SetBuildTarget from working
if you had an errors window focused. Fixing this bug simply
entailed removing two lines of otherwise dead code. Grrr.

2003-07-04 ed Basel

Improved Java advisor:

"this has slightly better (i.e. less verbose and cluttered) output. i
estimate i've got approximately two minutes before you say, 'oi! those
bits weren't verbose clutter, they were the useful bits!'

try positioning your caret on the text "new Date" for an example of the
kind of poor library design that frustrates any attempt to make a tool
like the java advisor helpful. ffs! at least those are deprecated, but
they have been for ever, and i doubt they'll ever actually disappear."

2003-07-04 elliotth Bracknell

If a save-all operation fails, cancel whatever it was that caused us to
attempt to save (a build, say).

2003-07-03 elliotth Bracknell

Moves "macro" to the end of a tag's description in the tags panel. It's
much less confusing like that, and much easier to find what you're looking
for. Should everything be postfix? Should we have icons? Should the macro
icon be a steaming turd?

2003-06-31 elliotth Bracknell

Factors out the save-all/don't-save/cancel code from BuildAction into Workspace.
Adds a checkEverythingSaved property to each tool. Default false. If true, pops up
a dialog similar to that on Build if there are unsaved files.

2003-06-25 elliotth Bracknell

The JFlex stuff unhelpfully throws Error instances rather than Exceptions. Changed
ETextArea to catch Throwable instead of Exception, so that we might recover slightly
better. (This happens to martind every week or so.)

2003-06-22 elliotth Bracknell

Dumps the complicated HTML lexer in favor of the simpler one, renamed XmlLexer,
and lightly modified to cope better with XML. Use the XmlLexer not only for HTML (which
isn't XML, but who cares?) but also for .xml and .plist files. Really, we should be checking
to see if the file begins "<?xml", but that's more tricky for an interactive editor.

Perpetrated a disgusting hack in FindAndReplaceAction so that we cope properly
with lines that contain '<', which would otherwise be interpreted as HTML (because
we're using an HTML renderer to show our matches). It would be really nice to have
a proper renderer for our matches, not least because we could show subgroups. It
might be nice to have tooltips (or something) showing what we'll replace with, too.

On Mac OS X, makes the inactive title bar colors (Color.)brighter so there's a visible
distinction between the focused window and the others. Unfortunately, this seems to
turn out white, which is perhaps not ideal. I wonder about using the "shiny Aqua blue" for
the focused window, and "shiny Aqua light gray" for the inactive windows. (Sort of like
the selected tab on a JTabbedPane, compared to the unselected ones.) Only I don't
know where to come by that Color (or however it's rendered).

2003-06-20 elliotth Bracknell

Makes EErrorsWindow more of a first-class citizen. It isn't automatically
excluded from most of the text actions any longer. The only obvious ones
that would make sense but aren't available (that I can think of) are the
things on the Find menu.

Defaults to the fixed-pitch font in errors windows, for better alignment
of ASCII art output from programs that are trying to be helpful.

2003-06-18 elliotth Bracknell

Registers errors windows with the Advisor, so we can get advice on things we see
there. Adds a couple of calls to unregisterTextComponent, too, which we weren't
making before, and which probably meant that we retained heap rather badly (all
files, for example, and all errors windows too).

Improves (both in terms of accuracy and efficiency) the address-detecting code
in LinkFormatter. Now recognizes, for example, the filenames in jikes' non-emacs
output.

Makes EErrorsWindow use an ETextArea and an ECaret.

Adds a text field to the Advisor so you have a way to ask an advisor about something
without editing the file you're working on (assuming it isn't already there).

2003-06-15 elliotth Bracknell

Adds the ability to specify what target to build. This is remembered
for the duration of the current session. You can set a default in the
properties file (until we junk that), or you can rely on the build tool's
default target.

Tidies up some duplication in Edit regarding preference filenames.

2003-06-03 elliotth Bracknell

Increases minimum text window size to ensure there's always a visible
pixel as work-around for the problem where we lose our scroll position.

2003-05-30 elliotth Bracknell

Changes the next-word action to go to the end of the current
word if the caret's in a word. This seems to be a major
improvement, but we'll see: all my previous changes have seemed
like major improvements at first. The only real test is whether,
while editing, you find yourself annoyed because the caret's in
the 'wrong' place.

Improves the tags panel for C++ use. No more confusion between
unmarked 'X' and 'class X', inclusion of prototypes (handy when
you're editing a header file and want to jump to the signature
of a member function).

2003-05-25 elliotth Bracknell

Based on experience, I don't think the next-word action was
right. I think it's more useful if both previous- and next-word
go to the start of a word. This seems to be Windows' behavior.

Edit now remembers where the window was, and how big it was.
This does mean, though, that the next time you run it, it will appear
in a default position and with a default size.

Fixed behavior of next-word action when in a run of whitespace.

2003-05-24 elliotth Bracknell

Overrides DefaultEditorKit's previous- and next-word actions to behave
more like a programmer's editor should. Our behavior is now exactly
like Project Builder's, apart from the fact that the Mac seems to use
'alt' where Windows uses 'ctrl' to move by words, only no-one's told
Apple's Java about this, so it uses 'ctrl'. We override the action, so we
do whatever the default keybindings say, which seems right, even if --
in this case -- it's wrong.

Removes unused code from the caret, to do with when we tried to fake
drawing the selection to the right-hand margin.

Removes the pointer-warping code. For some time I've only had this
enabled on Mac OS, and it's been annoying the hell out of me there.
Adios, last vestage of X11 weirdness.

2003-05-23 elliotth Bracknell

Made C-D and C-G from the find minibuffer dismiss the minibuffer.

Made status bar messages time out after 20 seconds.

Switches to 'multiline' (?m) mode in the Find/Replace dialog, so
a pattern such as "^\+$" matches all those lines containing a single
'+', rather than just the document consisting of a single '+'.

Made the Find/Replace dialog more robust: if an exception is thrown
while coming up with something to show in the match list, we report
the exception.

2003-05-22 elliotth Bracknell

Got rid of the cruft relating to the old situation where researchers
could choose to display their results in a pop-up window. Tidied up
some dodgy indentation in JavaDocAction.

JavaDocAction now copes properly with non-Unix filesystems, and avoids
putting ugly unnecessary separators in URLs and pathnames.

Improves output of arrays by JavaWorkspaceResearcher (they now use the Java
source notation, rather than the class-file string notation).

Informs MiniBufferUser instances of the 'typing' of the value they suggest
as an initial value, so they can respond to this without needing a special
case in their code.

2003-05-22 martind Bracknell

Ensures that, when you hit C-D or C-G in the find minibuffer,
that the highlights are set up corresponding to what you've
typed first.

Improves the firing-actions-via-keyboard-equivalents code to be
less find-specific, and to move the responsibility for the actions
out into the MinibufferUser implementations themselves.

2003-05-20 elliotth Bracknell

Experimentally hide/show the minibuffer instead of enabling/disabling
it. I'm not sure I'll dislike this any less, but there's only one way
to find out...

Catch exceptions thrown in any of HighlightedDocument's methods.
This may help us soldier on in those rare cases where the CLexer
gets upset by something martin does.

Show in the status bar what an advisor link will open.

2003-05-20 ed Basel

* no more 'java.n.mmm' properties.
* finds jdk and Edit classes without needing any parameters
* maximum of three properties to specify
* all three are optional
* no more broken links to missing source or javadoc
* link to package index from advisor panel
* it's not so slow initialising

The three properties you want now are:

java.advisor.doc=;-separated list of javadoc indices
if it's not specified, class names are plain text, no links to javadoc.

java.advisor.source=;-separated list of source directories
if it's not specified, no (src) links are provided.

java.advisor.classpath=;-separated classpath for locating classes outside
Edit and Java
if it's not specified, only JDK and Edit classes are shown.

The order of the items in each of the lists isn't important, the lists are
independent of one another.

java.advisor.doc=file:///sys/doc/general/compsci/java/docs-1.4/api/;http://internal.ch.genedata.com/doc/general/compsci/java/genedata/util/;http://internal.ch.genedata.com/doc/general/compsci/java/genedata/phylosopher/;http://internal.ch.genedata.com/doc/general/compsci/java/jnlp/javadoc/
java.advisor.source=/n/data1/tmp/ed/;/u/ed/edit/edit/src/;/u/ed/genedata/java/;/u/ed/genedata/util
java.advisor.classpath=/u/ed/genedata/java;/u/ed/genedata/util;/sys/util/java/jars/jnlp.jar

2003-05-19 enh Bracknell

Makes the equivalent of "java.x.classpath=JDK" the default. Defaults
to using the system class loader rather than trying to guess the location
of the JAR file with the system classes.

Adds Ed's workaround to Minibuffer's problem with the focus having
gone back to the previous focus owner, but not appearing to have
done so.

Factors out the status bar into e.gui.EStatusBar, so I've got a handy
place to put appearance hacks.

Cosmetic minibuffer/status area improvements (at least for Linux). This
all still looks kind of sucky. Particularly on Mac OS X, where it looks really
odd.

2003-05-18 enh Bracknell

Added a Timer to the Minibuffer so that it doesn't inform the MinibufferUser
every time a character is inserted or removed, choosing instead to wait
for 500 ms of inactivity before reporting anything.

We now have both a status bar and a minibuffer. So a minibuffer user
can report things using Edit.showStatus.

Factored the minibuffer out of e.edit.Edit into its own class. In so doing
I seem to have broken the transfer of focus back to the component from
whence it came. On the positive side, I've made C-D and C-G work from
the minibuffer.

2003-05-16 enh Bracknell

Fixed find-next and find-previous, incidentally finding the error that's
been there for so long that prevented going to the very first match
in a file. I told you that rewriting the find code was the only way to find
the problem!

Replaced the first go at a minibuffer with a second attempt. Much more
feature-rich, though now definitely raring to be removed from Edit into
its own class. Takes care of much of the general-purpose minibuffer
client behavior, and correctly handles loss of focus (which the previous
attempt didn't).

Tidied up some of the status bar messages to show the ~ style of filename.

2003-05-16 ed Basel

Previously, for some reason, the workspace researcher didn't format the
class name as a link if it was researching '<classname>.' (The dot makes
it list accessible static members). Now it does.

2003-05-15 ed Basel

Stops putting the overly-verbose and no longer useful (?) keymap
dumps in the log.

Doesn't show 'extends Object' in the assistant.

Java users will appreciate the new improved java workspace helper, which
allows as many groups of classes and documentation as you like to coexist.
Now you can have links to your own source and javadoc as well as to the
jdk's.

Here's example configuration:

java.0.documentationIndex=http://internal.ch.genedata.com/doc/general/compsci/java/docs-1.4/api/
java.0.sourceDirectory=/n/data1/tmp/ed/
java.0.classpath=/sys/util/java/jdk/sun4/jre/lib/rt.jar
java.0.getPackagesFromJavadoc=true
java.1.documentationIndex=
java.1.sourceDirectory=/u/ed/edit/edit/src
java.1.classpath=/u/ed/edit/edit/src
java.2.documentationIndex=http://internal.ch.genedata.com/doc/general/compsci/java/genedata/util/
java.2.sourceDirectory=/u/ed/genedata/util
java.2.classpath=/u/ed/genedata/util
java.3.documentationIndex=http://internal.ch.genedata.com/doc/general/compsci/java/genedata/phylosopher/
java.3.sourceDirectory=/u/ed/genedata/java
java.3.classpath=/u/ed/genedata/java
java.3.neededClasspath=/u/ed/genedata/java/lib/util.jar;/sys/util/java/jars/jnlp.jar;/sys/dev/phylosopher/5.0/jars/oracle.jar

documentationIndex and sourceDirectory are obvious.

codebase is either the top directory of a package heirarchy, a jar file
containing classes, or "JDK" as shorthand to mean the rt.jar in the java
installation directory. it's not a real classpath, since it only allows
one entry.

neededClasspath is a ;-separated list of jar files needed by the
classloader to be able to resolve the classes it finds in 'codebase'.
(each java.* group gets it own classloader, so that the classes can be
found and used without adding everything to Edit's own classpath).

getPackagesFromJavaDoc is a boolean property that tells it to look for
package names in the javadoc it finds in documentationIndex, rather than
scanning directories or jar files. the normal behaviour is not to find
packages in the docs, but to scan jar files or traverse directories
(depending on whether 'codebase' points at a jar file, or a directory).

2003-05-14 enh Bracknell

Moved "Go To Line" over to using the mini-buffer, a
prototype implementation of which now exists. One
that can cope with the complexities of the current Find
dialog, though, will have to wait.

Tidied up some of the status bar text.

2003-05-13 enh Bracknell

Adds a simple status bar. Not very useful as yet, but it
will gain functionality similar to emacs' minibuffer, taking
over from the Find and Go To Line dialogs. For now, it's
just somewhere to put information that's not worth an
alert, but is potentially interesting.

Removes the code from EPopupMenu that caused EAction
objects to have their actionPerformed methods run
by a new Thread. Nowhere else do EActions get run
like this, so it seems like a bad idea.

2003-05-12 enh Bracknell

Works around Java Bug Parade #4688560, which won't be fixed
in 1.4.2, despite being raised 2002-05-21, nearly a whole
year ago. Sadly, I'm not sure of my workaround's validity.
The problem was affecting UndoAction and RedoAction, causing
them to go into an infinite loop inside the javax.swing.text
view code if there was a selection when they were called. I
think my workaround's okay because it removes the selection
before the Document (and its views) undergo mutation,
avoiding having DefaultCaret.handleMoveDot try to adjust
the selection.

Corrects a bug (of over-specificity) that was causing us to
sometimes not bother recoloring everything after an undo or
redo.

Ant, cunningly, has "debug=true" as the opposite of "debug=off",
so "debug=on" is not going to get the -g switch passed to the
compiler. I find this out the first time I need to use jdb.

2003-05-09 ed Basel

Adds "(src)" links after the javadoc links in the advisor's
window that link to the JDK source file corresponding to
the class in question. This requires the new property
java.sourceDirectory=/path/to/where/you/unzipped/src.zip/
before it will work. It would be nice to have some automatic
way of finding your JDK, but I've no idea how it would work.
Particularly because a developer might have several
available on their machine.

Adds a hack to EHtmlPane's HyperlinkListener to cope
with protocol-less URLs.

2003-05-09 enh Bracknell

Brought the C lexer's idea of integer literals into line
with the C9x specification.

2003-05-08 enh Bracknell

Moved the very useful Tools menu to the end of the
menu bar, which is an easy place to hit, instead of
the Workspace menu, which will only rarely be
wanted.

2003-05-07 enh Bracknell

Fixed the shell script so you can run it other than
from in $EDIT_HOME, and it will still work (use an
absolute path to the stubs JAR file, rather than
a cwd-relative one).

2003-05-06 enh Bracknell

Fixed Mac OS X related changes so that Linux still
works. An extra jar file of stubs for Apple-specific
classes is needed in the shell script (reflection seems
like too much effort for a one-off job), and I'd got
a test the wrong way round in Edit.handleQuit where
I was supposed to be deciding whether to invoke
System.exit or to rely on the system exiting of its
own accord (as Mac OS X will after handleQuit
returns, unless we tell it not to).

2003-05-04 enh Bracknell

Implemented com.apple.eawt.ApplicationListener in
e.edit.Edit to behave better on Mac OS X. We can
now show our own 'About' dialog (though we don't
have one), and can recognize the application menu's
Quit item (and the Command-C keyboard equivalent)
and quit gracefully, either refusing or saving state.

Made e.edit.Edit a lot less static. Started to shift to an
Objective-C style of Edit.getInstance() and making the
old class methods instance methods instead.

2003-05-01 enh Bracknell

Added support for middle-button pasting of the X11
XA_SELECTION data (which is what xterm and rxvt use).
So, selecting text in Edit/rxvt (without having to copy it)
makes it available for middle-button paste in rxvt/Edit.
Ideally, someone would fix all these shitty old apps to
use the clipboard, but that isn't going to happen soon,
and this is a reasonable work-around. (And an easy one.)

Fixed uses of writeLock/writeUnlock in HighlightedDocument
so that the writeUnlock is in a finally block. That way, we still
unlock the document if an exception is thrown. (Martin managed
to make the CLexer throw an exception again, though we still
don't know how.)

2003-04-30 enh Bracknell

Adds UI to add a new workspace. The "remove
workspace" UI is fake at the moment: you'll have
to edit the configuration file.

Remembers open workspaces in the preferences
directory. The properties in your properties file
are now ignored. If you've got no list of open
workspaces, you get the current directory 'for free'.

If no workspaces are opened from the configuration,
open a default workspace for the current directory.

Doesn't report an error if the list of files to
reopen at startup is empty (as opposed to non-existant,
which was already handled correctly).

2003-04-29 enh Bracknell

Stopped the errors window from automatically
scrolling. Pike was right about that: if something
doesn't need reading, don't put it on the screen.
Really, we should distinguish between stdout and
stderr like Project Builder does. But this will
do for now.

Removed EHighlighter in favor of the EditorKit's
default highlighter. Phil pointed out that, now
we no longer manage to highlight right to the
right-hand margin when we've got a newline
selected, there's no point trying to pessimize
the amount of the display that we cause to be
redrawn. This change reduces our CPU usage
somewhat when typing or sweeping a selection.

2003-04-28 enh Bracknell

Fixed a stupid mistake (missing $) in the shell script.

2003-04-27 enh Bracknell

Added code to remember the files open when
you close Edit, and to load them back in again
when you restart.

To prepare for splitting the various aspects of
configuration into multiple files, Edit now has
a preferences directory whose name is based
on the class name of Edit itself. On Mac OS X, it's
~/Library/Preferences/e.edit.Edit/ while Linux
has ~/.e.edit.Edit/ and Windows has a subdirectory of
the directory containing Edit, for want of a
better place.

Removed the long unused code for reading the
keyboard file.

2003-04-26 enh Bracknell

Made the coloring single-threaded. Ed and Martin
had both had trouble suggestive of some kind of
race-condition where the Colorer would be trying
to mutate the Document (to apply attributes) while
the original mutator (that had caused the Colorer
to start work) was still going. Of course, on a
multi-processor machine, this was a lot easier to
reproduce than on a slow machine (Ed's) or a
sometimes heavily-loaded machine (Martin's). I set
off down the path of removing the whacky 'document
lock' that kept the Colorer from treading on its own
toes, replacing it with Document's readLock and
writeLock, but realized that I was paying quite a
high price for all this synchronization anyway. As
an experiment, I tried rewriting coloring to run
in the thread that's causing the original mutations,
and it's much faster and smoother, at least on my
multi-processor machine. I guess we'll have to wait
until Monday to see how well it works for everyone
else. The code's much simpler now, though it still
hardly counts as having been reviewed.

Commented out some dodgy-looking code in
EColumn.relayoutAfterResize that was deliberately
throwing away the current vertical positioning of
components in a column the first time the column
was resized. This behavior had been enough to
make me think that *all* column resizing was
broken to the extent of being unusable. I found
this code while looking to add code to fix the
problem. I can only think that there was some
weird Swing behavior that this was once a work-around
for.

2003-04-25 enh Bracknell

Ensures that Colorer threads get stopped when their
ETextArea owners are no longer needed. If the
Colorer wasn't actually doing anything at the time, it
would get woken up and promptly go back to sleep,
not counting 'exiting' as being 'something to do'.

Gave the ETextArea.Colorer instances more descriptive
names to help work out which ones are getting
left lying about. Turned out all of them were. D'oh.

Gave the EditServer thread a name of its own, too.

2003-04-24 enh Bracknell

Fixes the long-standing (but not very serious) error where
given workspaces ~martind and ~martind/puffer, the file
~martind/personal/adr.txt would end up on the puffer
workspace, because the 'p' in both 'personal' and 'puffer'
was counting towards their common prefix, where in
reality only whole directory chunks should count.

2003-04-23 enh Bracknell

Works around the fact that switching to JTextPane had
made moving more than a couple of ETextWindows around
really slow. A lot of time was being spent in
JEditorPane.getPreferredSize, going through all the
spans making up the document. ETextArea.getPreferredSize
now skips this and answers Dimension(0,0) if its parent
is too small that there's any chance of pixels hitting
display. It's now as nippy as it used to be.

Corrects the Mac OS X javadoc location to correspond to how
things work in Jaguar with 1.4.1 --- now I've got a display
large enough to fit a web browser on it, I may as well make
use of it. I can't help but feel that the 'help' key on my
keyboard should do something along the lines of find javadoc.

2003-04-22 enh Bracknell

Passes the ANT_HOME environment variable through. I need
this at home because I haven't messed with Ant there (at
work I just modified the ant shell script).

No longer starts the shell used by ShellCommand with the
"--login" option.

2003-04-17 enh Bracknell

Recolors the entire document after an undo or redo,
because pretty much anything might have happened.

Tidies up JavaLexer.lex to remove duplication.

2003-04-14 enh Bracknell

Reduces the coloring thread's priority in an attempt to
ensure that we stay as responsive to the user's editing
as possible.

2003-04-13 enh Bracknell

Adds HTML syntax coloring.

Removes incorrect 'volatile' modifier from Colorer.v, which
I've renamed to the more descriptive Colorer.workQueue.

2003-04-12 enh Bracknell

Adds Ant rules to ensure that the CLexer, JavaLexer and
LatexLexer get regenerated when the jflex input files change.

Replaces the Thread.interrupt-based inter-thread communication
with the more usual Object.wait/Object.notify scheme. This
fixes assertions thrown when we accidentally (race condition)
interrupt AbstractDocument.writeLock!

Removes unnecessary synchronization object from Colorer,
synchronizing on the Vector that holds work items instead.

Removes the 'content' (lexeme) storage from JavaToken and
LatexToken, and modifies JavaLexer and LatexLexer accordingly.
This saves us creating a whole bunch of objects we'll never
use.

Makes LatexToken return style names corresponding to the styles
used for Java and C++.

2003-04-11 enh Bracknell

Makes the behavior when building with unsaved files more
like Project Builder (and, I'm told, Visual C++) by offering
the choice of saving the unsaved files.

Hides any open dialog if you change workspace.

2003-04-10 enh Bracknell

Automatically clears the errors window before a build (but
not before anything else). I'm not convinced this is the right
thing to do, but Ed's whining. I think build output should
perhaps be treated differently to other commands' output.

Fixes CLexer.lex to not recognize "compl" as an equivalent
of "~" everywhere, just where "~" means bit-negation. Corrects
spelling of "complement". Fixes recognition of ULL (which is
in C99 and is recognized by gcc/g++).

2003-04-09 enh Bracknell

Switches to using DefaultHighlighter.DefaultHighlightPainter
with a half-transparent yellow Color for highlighting find
matches. This looks slightly funkier than the old highlighter,
and always renders correctly when a StyledDocument is in use.

2003-04-07 enh Bracknell

Fixes a serious error in the Find/Replace code, where attempts
to replace matched strings with something that contained a
new match would result in an infinite document.

Reaps colorer threads when their windows are closed.

2003-04-06 enh Bracknell

Had to edit a file using real tabs, and found 72pt tabs
too wide. When we used JTextArea, real tabs were four
monospaced characters wide. This behavior is now simulated
with JTextPane.

2003-04-05 enh Bracknell

Improved the logging by moving from System.err.println to
Log.warn, which prepends a date stamp.

2003-04-04 enh Bracknell

Made the syntax coloring more like Project Builder. Same
colors, same distinctions (so, for example, string literals
are distinct from other literals).

Added replace method (new in 1.4) to HighLightedDocument.

Removed unnecessary "new String(string)" constructs from
com.ostermiller.syntax.lexer.*Token classes.

Fixed support for syntax coloring with proportional fonts.

Improved the behavior of C-D and C-G when nothing is
selected. They now repeat whatever the last search was.

Switched from disabling the tabs for empty workspaces to
using something like Outlook's "unread" number in parentheses.
This means that all tabs are enabled all the time, unless the
directory doesn't exist. This makes it possible for Ed to use
Open Quickly again.

Made Esc close FormDialogs (such as the Find/Replace
dialog).

Adds ')' to the list of regular expression metacharacters that
need escaping if we're turning a literal string into an
equivalent regular expression.

2003-04-03 enh Bracknell

Integrated syntax coloring code from Stephen Ostermiller.

Added -Xmx1g to the Java command line in the edit shell
script. There's no reason to restrict ourselves to 64MBytes
if we assume that Edit's allocating memory because we
want it to, rather than because it's running amok. This
should increase the maximum size of file we can edit, despite
the move to JTextPane.

2003-04-02 enh Bracknell

Makes all tabs disabled by default. Only when a file's opened
on a tab is that tab enabled, and it's disabled again when the
last file's closed. This means that you can see at a glance
which tabs have something on.

2003-04-01 enh Bracknell

Translates selected text to a regular expression that matches
that literal text for C-D, C-G and C-F.

2003-03-27 enh Bracknell

Fixes something I haven't seen before: an exception that gets
thrown if you invoke getLocationOnScreen if the Component in
question isn't on the screen. Note that testing isVisible is *not*
the right fix. You need to test isShowing. isVisible "determines
whether this component should be visible when its parent is
visible". isShowing "determines whether this component is
showing on screen". Despite the fact that setVisible makes a
component 'showing', not 'visible', which isn't individually
settable, as far as I can see. Does this mean that the other
two places where we invoke isVisible should actually invoke
isShowing?

Ed suggests that it's only when you're asking a Component that
is contained that isVisible and isShowing can disagree. If you're
asking a top-level Component such as a dialog, we think there
should be no difference. On that basis, I've left the isVisible
in Edit.java alone (because it was talking about a JDialog), and
changed the one in TagsPanel.java (because it was talking about
a JPanel).

2003-03-26 enh Bracknell

Switches to using regular expressions for search-as-you-type find.
If there's a syntax error in the pattern, the label that usually
shows the number of matches explains what's wrong.

Added a work-around for what seems to be a Mac OS X problem (that
I ought to look into and submit a bug report for) that caused the
LAF code to ask for element -1 in the find dialog editable combo
box's model. This, by the way, looks like shit. There's no such
thing in Aqua, and it looks like no-one's ever tried to use one.

Works around the problem where an already-open file's window is too
small for us to show the required line by simply invoking the method
that makes that window take up all the non-titlebar space in the column.
This happens if the window in question is showing less than twice its
titlebar's height of text. It's not exactly what I wanted, but it's easy, and
I've waited years to work out how to put what I want ("make it large
enough") into implementable words.

Changes the Find/Replace dialog to use a SwingWorker to do the
match-finding in the background, and so we can interrupt it. This
was intended to help with things like "\S " that match lots. Sadly,
that's made no difference to the overall behavior because it turns
out that what's expensive isn't the search, it's the building of all the
HTML document models that's expensive, and that's not helped
by this because it happens in the Swing event thread. For now I've
made Edit refuse to show more than 100 matches. Hopefully Ed
will feel inspired to write us a nice lightweight component for
displaying a single line of multicolor text.

2003-03-25 enh Bracknell

When the Find/Replace dialog is brought up, the matches list is updated
to correspond to the pattern used last time.

Replaces spaces with "&nbsp;" when colorizing matches in the Find/Replace
dialog.

Ensures that the appropriate workspace is made visible when you try to
open a file that's already open. Previously Edit gave up before getting
to the code that selected the workspace.

Fixed EPopupMenu to refuse to place two separators after one another.

2003-03-23 enh Bracknell

Refactored the code that parses the external tools' descriptions in the
properties file so I could use it in ETextWindow to add context-sensitive
external tools to the text window's popup menu.

Fixed the code that sets up the workspaces based on the properties file
so that it understands ~/paths.

2003-03-20 enh Bracknell

Fixed a mistake introduced yesterday that meant it was impossible
to close an ETextWindow whose FindDialog hadn't ever been visible.

Added DOS-style keyboard equivalents for copy/cut/paste to keep
martind quiet. Hopefully I won't ever be annoyed by this throwing
away my clipboard when I hit Del after Shift-cursoring but before I've
let go of Shift.

2003-03-19 enh Bracknell

Changes the find dialog to use a single shared model for its
history.

Ensures that at most one dialog is visible at a time by closing
the last shown dialog when Edit.showDialog is invoked again.

Closes any open find and goto dialogs when an ETextWindow
is closed.

2003-03-19 martind Bracknell

Fixes the behavior of the find dialog when you bring it up, type
some text and hit return. Previously, it didn't perform a search.
Fixes the behavior when you paste a search term in.
Removes some cruft from FindDialog.java.

2003-03-12 enh Bracknell

Reduces the maximum size of file we'll open to 1024 KBytes.
The change to JTextPane from JTextArea means that we need
a lot more memory per paragraph (line) now. How sad. That
was probably one of the other reasons I avoided JTextPane
originally.

2003-03-11 enh Bracknell

Comments out the code in ECaret that tried to do the more
programmer's editor-like highlighting. It never worked 100%,
and the recent move to JTextPane has made it worse. Let's
see how bad life is with Windows-style selection highlighting.

Switches to JPopupMenu instead of PopupMenu. The AWT
popup menus really suck on Linux, and we plan to make
better use of them in future than we have done so far.

2003-03-10 enh Bracknell

Fixes potential deadlock when opening files via EditServer. Swing
operations should come from the Swing event-dispatching Thread.
Swing is not thread-safe.

2003-03-09 enh Bracknell

Fixed the behavior relating to fixed/proportional fonts. Found
out when DocumentListener.changedUpdate gets invoked, and replaced
the code in it with a comment accordingly. Modified
DocumentUndoFilter to be able to ignore style-related UndoableEdits.

Modified the 'dist' target to perform a clean build.

Started to use Scott Violet's DocumentUndoFilter. Took me a while
to work out how to use it, but it's working now. It watches the
UndoableEditEvents and converts them into objects that know to
coalesce adjacent edits (so a run of typing undoes in one go) and
to update the caret position when we undo/redo. This makes undo
a whole lot less lame.

Switched from JTextArea to JTextPane. Copied the missing methods
(getLineCount, getLineOfOffset, getLineStartOffset, getLineEndOffset
and replaceRange) from JTextArea.

2003-03-08 enh Bracknell

Puts an incoming file in the right workspace (the one whose root
directory has the longest shared prefix with the filename of the
new file), and bring the workspace in question to the front.

2003-03-07 enh Bracknell

Automatic reformatting of pasted text is now optional, but defaults
to being on. You need "reformatPastedText=false" in your edit.properties
to disable this behavior.

Fixes the behavior of Enter in the "Find" dialog. It should dismiss
the dialog and leave the caret at the current match, as in vi. (Esc
dismisses the dialog and returns the caret to its original location.)

Adds some code to support C-D and C-G in the "Find" dialog. I
couldn't get it to work properly, though. C-G needs to be hit twice
to move from the first match, and then you can't get back to the
first match with C-D. All the later matches seem to work fine.
(Look for FIXME in FindDialog.java to see where to re-enable this
if you want to look for the problem.)

Reduces the width of the BirdView to discourage the
desire to click on it. Attempts to slightly improve the situation with
the usableArea being slightly off.

Ensures that the tags are hidden if the text they corresponded to
is closed or the user switches to another workspace. Our behavior
here is now better than Project Builder's: I had difficulty yesterday
trying to find out how exactly to get it to update its equivalent list.
Thinking about it, maybe I should use its combo box --- maybe
the database backing the tree view is only updated when you
recompile?

Be honest about our ability to cope with very large files and refuse to
open anything larger than <pulls number out of hat> five megabytes.
This is lame, but it's rather less lame than allowing ourselves to
become pretty unusable after an OutOfMemoryError. It would be
interesting to find out where the exception is thrown (there is, of course,
no backtrace) and plug the memory leak that occurs (ouch!).

2003-03-06 enh Bracknell

"Revert to Saved" now lets you 'revert' to a copy that's changed since
Edit opened the file. Previously Edit assumed there was no need to
revert if the window wasn't dirty. Now it takes the last modified time
into account.

Ensures that you're at least warned if you try to build without having
saved. Project Builder does this better, bringing up a list of the
unsaved files and giving an option to "Save All", which is most likely
what you want to do.

Modifies EErrorsWindow to understand C-W.

2003-03-05 enh Bracknell

Brings back the server on port 1948 so I can alias 'vi' to something
that gets Edit on the case. It's no longer a bastardized HTTP, it's a
simple protocol intended for use with something like:

    echo "open /etc/passwd" | socket -c -q localhost 1948

Corrects the text of the "do you want to replace this?" dialog, and
generally makes the dialog messages more uniform.

Removes the half-baked attempt to have read-only texts if the files
they correspond to can't be written. This fixes a bunch of bugs and
isn't obviously a worse idea anyway. You can always edit any file, you
just can't necessarily save it back where it came from. There's always
"Save As...", though, or you might be able to use chmod(1) or "bk edit"
or somesuch to make a file writeable.

Fixes behavior with ~/style/paths in "Open Quickly" and "New File".

Fixes a problem where the check to see if a file's already open was
being made too early, before we'd canonicalized the name. I've
factored it out and moved the call to later on in Workspace.openFile.

Fixes the problem with the "Go to Line" dialog not being dismissed if
the user hits Esc.

Checks there's no unsaved data before allowing Edit to quit. It will now
take you to the first workspace with unsaved data and bring up a dialog
explaining what's going on. The UI could doubtless be better, but it
seems unworthy of too much effort. Why would you quit Edit?

Brings Edit to the front if we receive a request off the network to open
a file. Only returns a message to the client if we don't understand what
they ask.

2003-03-01 enh Bracknell

Fixes a bug with the results in the "Find/Replace" window where lines
that started with // or /* were losing their beginnings. The JLabel HTML
rendering seems only to start at the first tag in such cases. Inserting
a "<BODY>" tag after the "<HTML>" seems to fix it. (Bug submitted.)

It turns out that we start up much faster (and without the rather awkward
shuffling of the GUI) if we don't make the Frame visible until we're
finished changing it. It used to be that the better user experience came
from putting something on the screen as soon as possible. It turns out
that that's no longer the case.

2003-02-28 enh Bracknell

Adds a status line to the "Find/Replace" dialog to show error messages
if your regular expression fails to compile.

Slightly improves the efficiency of rendering matches in the "Find/Replace"
list by only generating the colored version once.

Makes "Open Quickly" show matches as they're found.

Fixes the error where "Open Quickly" threw away the information about
what directory it had started searching from, and assumed that the
directory field's contents were unchanged when you came to double-click
on a match or hit "OK". We now remember the value used for the last
search.
 
Martin points out the Edit is unusable if you don't have Exuberant ctags
installed. It pops up an error dialog which steals the focus. Dismiss it,
and the focus goes back to the text, which causes the tags code to try
again. Cycle. Worked around this by using reportError instead.

2003-02-24 enh Bracknell

Ensures that the TagsPanel gets revalidated properly, so we get scrollbars
on the tree if necessary.

Embeds the TagsPanel JProgressBar in a JPanel to improve appearance on
Linux and Windows, at the cost of making it slightly uglier for Mac OS X.

2003-02-22 enh Bracknell

Made the "Open Quickly" dialog remember the results of the previous search.

Made FormPanel give extra vertical space to JScrollPanes if the panel is
resized vertically. This improves both "Open Quickly" and "Find/Replace".

Removed profanity from edit.properties.

Made "Open Quickly" case-insensitive. I realized that a heuristic such as
"if the user's typed all-lowercase, search case-insensitively, otherwise
assume that they knew what they were doing" is probably more like what I
want, but let's try the simplest solution for a bit.

Made "Open Quickly" hide the prefix in the filenames it finds. The user
asks Edit to search below a given directory, so it can take for granted
that the matches are, indeed, below that directory. Missing off long
prefixes makes it more likely that we won't have to scroll to see the
interesting part of the name.

Removed some of the cruft surrounding openFile: there's no longer any notion
of context; you can only supply a pathname.

2003-02-21 enh Bracknell

Made "New File" add a trailing directory separator to the directory name
in its text field.

2003-02-15 enh Bracknell

Made it possible to interrupt an "Open Quickly" search. OpenQuicklyDialog
keeps track of its SwingWorker, and invokes SwingWorker.interrupt if the
dialog is dismissed. The inappropriately located and inappropriately named
FindFilesDialog.findAllFilesContainingStringBelowDirectory now checks the
current Thread's interrupted state between each file or directory it looks
at, and aborts if need be.

The TagsPanel progress bar is now only shown while tags are being
processed. This saves precious vertical screen space most of the
time (and all the time that it's important), and on Mac OS X saves
CPU time (Aqua progress bars are animated, and it looks as if the
Java implementation doesn't stop its animation thread for the special
case of 0% progress, presumably not imagining that anyone would want
a progress bar on-screen all the time; Project Builder's build progress
bar in its status bar comes and goes as needed).

If a workspace's root directory doesn't exist or isn't a directory, Edit
now disables that tab and sets the tooltip text to an explanation of why.
This is nicer than just popping up a dialog, which is what I tried first.
Not having any feedback whatsoever (as in Edit up to now) isn't very
helpful, as I found when I renamed one of my BitKeeper repositories at
work but forgot to update Edit's configuration. Given the way I use Edit,
I'm tempted to have an option to set a projects directory, and have Edit
automatically add a workspace for each directory under there.

Edit now warns you if there's a problem with what you entered in
the "Below Directory" field in the "Open Quickly" dialog. Previously
it would just fail to find any matches, leaving you scratching your
head as to why, not realizing that you'd mistyped the directory name.

If you give a tool the name "<separator>", Edit will add a separator to
the "Tools" menu at that position.

2003-02-14 enh Bracknell

Adds a menu item (and keyboard equivalent C-K) to clear the errors window.
Why do I need to add these to ETextArea.java? It's annoying and stupid.

Uses "Table.font" for "Menu.font" and "MenuItem.font" because all that bold
text was starting to give me a headache. When I'm looking at a menu, you
already have as much of my attention as you're going to get, so there's really
no point in SHOUTING AT ME!

My repeating messing about with ETextField v JTextField broke the "go to"
dialog a while back. Fixed. Also added an error message if type something
that isn't a number.

The "Below Directory" field in the Open Quickly dialog now gets a trailing
File.separatorChar added to make it slightly easier to specify a subdirectory.

Modified Edit.showDialog to center dialogs vertically, rather than hide them
up by the title bar. It's a half-assed imitation of sheets, and not really
appropriate anyway: if anything, we ought to be using the ETextWindow title
bars, not the JFrame title bar!

2003-02-10 enh Bracknell

A day's use was enough to convince me that hungry deletion shouldn't
start at the character before the whitespace. You now have to explicitly
start deleting whitespace, but when you do, it will disappear as one.

2003-02-09 enh Bracknell

No longer clear the errors window before running a command. I've found
this annoying several times this past week, and want to see if the opposite
behavior is annoying. Surely I'd close the window if I were no longer
interested in its contents? We'll see.

Added the ability to define keyboard equivalents for commands on the
"Tools" menu. Every time I have to deal with KeyStroke, I gain further
experience of how badly designed it is. The constructor is private,
and the getter that takes a Character and an int (representing modifiers)
doesn't let you say whether this is for a keypress or keyrelease. I, of
course, need the one they don't offer, to be able to use it as a Swing
JMenuItem 'accelerator'. And, though -- unlike all the other KeyStrokes --
this particular kind isn't cached, I can't modify the instance I've been
given. So you might think I'd want to use the constructor that takes a
String, but you'd be wrong, because there's no way to say "platform menu
shortcut key". I have to explicitly name "meta" or "control". But, because
modifiers are (of course) int bitmasks, I can't readily convert to this
textual form. So I end up copying code from KeyStroke.java that uses
reflection to convert a char into a virtual keycode (which is, of course,
represented as an int). Jesus! Hopefully, when Java 1.5 gives us OO
enumeration types, someone will go back and clear up all the ugly, stupid
and broken API that's grown up because of the lack of a decent replacement
for C-style enumeration types, and the readiness of legacy coders to think
in terms of enumeration types and their equivalence (in C) with integers.

Anyway, grep is now C-S G, making it a little more integrated. I can't
help thinking grep is worth making a special case out of though.

2003-02-08 enh Bracknell

Fixes URL-opening for Mac OS X Java 1.4.1 --- the old Apple-specific
class has gone, so we need to fall back to running some command-line
program like on other platforms. (/usr/bin/open, in this case.)

Fixes the behavior of InsertClosingBrace at the end of the file. If
we insisted, like vi (and various compilers including javac), that a
file ends with a newline, it would make things easier because more
uniform.

Prevents an exception being thrown if you enter a newline at the end
of the file.

Fixes the infelicity that used to mean that you couldn't jump to a
class/struct/enum definition, only the definitions of their members.
The trouble was that the branches we were using to represent
these namespaces were synthetic, and had no Tag backing them (so
nowhere to jump to). Now we ensure that we use a branch created
from a tag, and don't introduce a synthetic branch unless it's an
emergency (which -- as well as being possible because of malformed
input -- could happen all the time in a C++ .cpp file, say, where you
have member function definitions but no class definition because
it's in a separate .h file).

Adds support for enums similar to that for classes and structs (so
enum values get grouped together as leaves on a branch named after
the enumeration).

Removes hard-coded support for C++ and Java tags, replacing it with
something that should work for any kind of file ctags can recognize.
I added a LaTeX parser to my local copy of Exuberant ctags, too, but
still haven't got round to looking at a patch that would allow
generation of tags files containing only fully-qualified names, which
would make parsing the tags to produce a table of contents tree much
easier, I think.

Makes read-only files uneditable.

Fixed InsertNewlineAction, InsertClosingBraceAction and ETextArea.paste
to use CompoundEdit instances to wrap their changes so that they can be
undone in one step, to match the fact that they were done -- from the
user's perspective -- as one step.

Added a new property, "hungryDelete". If set to true, runs of whitespace
will be deleted as if they were a single character. If set to false,
behavior is as before (where runs of whitespace are removed in chunks
equivalent to your "indent.string".) I'm not sure if it starts too early:
if you remove the last character before a run of whitespace, the whitespace
goes too. I'll have to do some actual programming with it to decide, I
think, because I can imagine that being either useful or annoying.

Added a work-around for the odd scrollbar implementation on Mac OS X,
which makes it difficult to put the BirdView in the right place.
For now, it's a reasonable guess, which is more-or-less right for me.

2003-02-07 enh Bracknell

The white holes next to the scrollbars were starting to annoy me, so
rather than wait for Ed to tell me the right SystemColor to use, I've
just guessed one. I don't think it's exactly right, but it's close,
and not nearly as distracting as the white was.

2003-02-06 enh Bracknell

Slightly modified some Cursor-related code to use Cursor.getDefaultCursor
instead of the two other schemes I'd come up with.

2003-02-01 enh Bracknell

Brought back the WorkspaceAdvisor stuff. It now lives underneath the
"table of contents" on the right. There's one per Edit, rather than
one per Workspace now, so it's called plain old Advisor instead.

Made all forms much tighter on Windows by recognizing it and using
a much smaller value for the space between components. Mac OS X and
Linux stay as they were.

2003-01-29 enh Bracknell

Switched to using the reflection code I wrote ages ago to work out where
the document (find) overview should go to be adjacent to the scrollbar
track.

Always checks for ExternalToolActions with numbers less than 256, rather
than stopping at the first one it doesn't find. This makes it easier to
have tools that only appear on particular operating systems.

Added a handy tool for me at work that opens an rxvt window in the
directory with the VHDL applicable to what I happen to be doing.

2003-01-28 enh Bracknell

Copes with tags for struct: the same way we do for class: (previously,
struct X { int x; } looked like ::X and ::x, instead
of X and X::x.

Changed the TagsDialog into a TagsPanel, and inserted it into the main
Frame. There's no TagsAction any more, because it's always there.

Fixed the initial position and dynamically-updated position of the split
fairly well. We'll see how it works out in practice.

2003-01-25 enh Bracknell

Revamped the tag description code so that the tree now says things
like "package e.edit" and "namespace Jikes", and differentiates
between the method "isUsed()" and the field "isUsed", and so forth.
The most notable bad behavior now is that enum values don't appear
as leaves of the corresponding enum type.

Made the FormDialog layout a little more spacious. (I really ought to
test on Windows now and again, because I keep tweaking things for the
benefit of Linux and Mac OS X, with little or no regard to its effect
on Windows.)

Fixed "Save As", though it behaves like vi's ":w <filename>" rather
than like Windows (and presumably Mac OS X).

Moved tag scanning into a SwingWorker, though it seems not to have
improved responsiveness. Added an indeterminate progress bar to the
dialog, so you can see when it's updating the tags.

Switched to using broadly traditional dialogs rather than idiosyncratic
behavior for things like what to do when someone tries to close a window
with unsaved changes or save over a modified file.

2003-01-24 enh Bracknell

Corrects the behavior of recursive calls to openFile to only
append an address when there is one (otherwise Java will append
"null", which keeps us from crashing, but isn't what anyone
intended).

Switches to the Metal look and feel when on Linux, rather than
forcing Motif. I'm sick to the back teeth of Motif's ugliness.
Even Metal has trouble being quite that ugly.

Splits (OpenQuickly)Action into an \1Action and a \1Dialog, with
one dialog instance per workspace, as opposed to the effective
one-per-Edit situation we had before (because there's still only
one Action, on the menu bar).

2003-01-23 enh Bracknell

Fixes a problem where LinkRecognizer was recognizing one character
too few (so a link like "file.c:12" only went as far as "file.c:1"
when followed --- different to what was displayed in blue). My quick
fix means that strings like "file.c:12: // grep match" now
get "file.c:12:" as the address. But since the address-jumping code
seems to handle trailing colons, I'm not convinced this is a bug.
I've never been certain of the definition of an address.

Fixes the problem with not jumping to an address if the file was
a symbolic link.

Makes the text field in the goto dialog default to '10 characters'
wide, instead of being dependent on the number of digits in the
current line number (sucky when you're on line 1).

Removes OpenFileSetAction. OpenQuickly is the winner of this round.

Adds 'missing' constructors from ETextField. It now has all the
constructors that JTextField has, and is a proper plug-in replacement.

Removes override of requestFocus from ETextField. Doing a selectAll
from there is annoying, and not the right behavior. We should selectAll
if we gain the focus because a dialog has been brought up, but not
because a field has been clicked in. I factored the focus-redirection
code out of EDialog and into DialogFocusRedirector. FormDialog now
uses an instance of this new class to set the initial focus, and it's
DialogFocusRedirector that invokes selectAll.

Before I better understood what the above change needed to be, I
changed JTextField to ETextField where I could. I'm no longer sure
that's a particularly good idea.

2003-01-22 enh Bracknell

Fixes a bug that caused a hang when reading a tags file with
no tags.

2003-01-21 enh Bracknell

Pretty much fixed the tags dialog (in its new role as Table Of
Contents dialog). It now follows the focus, so it shows you
what's in the file your caret's in. Or at least, it shows you
what's in the on-disk version of the file. It tries a bit harder
to keep from going off the edge of the screen, though it still
assumes that it should live to the right of the main window.

Started to change the tags dialog behavior so that there's one
tags dialog per Edit instance, and it shows the tags for the
currently-focused text. It's a bit shaky at the moment, but it's
getting there.

2003-01-20 enh Bracknell

Made the tags window tree start out fully expanded (and without
the silly icons that only make sense for file/directory
hierarchies).

2003-01-19 enh Bracknell

Improved the tags window somewhat. It now tries to position
and size itself so that you shouldn't have to manually mess
with it. It also uses a tree representation rather than the
old table. Related items (members of a given class, for
instance) are grouped under that class. A lot of work still
needs doing before it's the kind of thing you'll find yourself
turning to out of habit, but it's a step in the right
direction.

2003-01-18 enh Bracknell

Resolved a long-open question from the TODO file in
favor of simplying bringing dialogs to the front when
the user requests them. (Why didn't it do that anyway?)
This seems both simpler and more sensible than any kind
of mutual-exclusion on dialogs. (The motivating example
was that bringing up the find dialog and then the goto
dialog, the latter had a tendency to appear behind the
former, which was confusing to say the least. I never
noticed this -- though I did verify it when it was
pointed out -- because I always dismiss a dialog when
I'm through with it. Seemingly, some people leave them
up like floating palettes. Maybe they have Very Large
Screens and Great Difficulty With Keyboard Equivalents.)

Modified the code in Edit.java that displays alerts and
questions so that you don't have to manually insert
line-breaks into the message text: it will break at the
first space after 72 characters. (This is obviously
somewhat simplistic, but we managed to come this far
without attempting to do anything, so this should do
for a while yet.)

Switched "Open" back to using the platform's native
open dialog. "Open Quickly" is now Edit's "anything
you can do, I can do better" open dialog.

Added "Save As...", though it's not finished yet: I need
to check up on exactly what the behavior is supposed to be.

2003-01-16 enh Bracknell

Reinstated the "Revert to Saved" command, polishing it
with the addition of Edit.askQuestion, which lets you
ask the Revert/Cancel style of question.

Gives OpenQuicklyDialog instances memory, so that they
remember what you chose last time, rather than reverting
to their original settings each time. (I felt I should
type this out again, in the hope that I remember that
this is more useful behavior than reverting to defaults.
If defaults are that useful, provide a "Revert to Defaults"
button or something.)

Gives ExternalToolAction instances memory, so that they
remember what you chose last time, rather than reverting
to their original settings each time. (I found my brain
obviously had some memory of what I'd been up to last time
round, and was assuming things hadn't changed. Change the
tool, 'cos you can't change the brain.)

Updates edit.properties so that my "bk revtool" action works
again. I seem to have changed the environment variable names
without changing the place where they were used.

2003-01-13 enh Bracknell

Fixes a bug with "Open Quickly" and start directories that
don't exist.

Merged back the sfind/sgrep improvements that got lost over
the weekend. Copes better with spaces in filenames, files
with extensions I've not thought of.

2003-01-12 enh Bracknell

Fixed an error in OpenQuicklyAction: I was trying to reuse
an instance of a SwingWorker subclass. You can't do this,
but it doesn't throw an exception or anything, so Edit just
sat around doing nothing. (You could still click Cancel in
the dialog, so it wasn't very serious, but it was annoying
all the same.) Now I create a new instance every time.

Made the behavior if the user hits Return in the directory
field the same as if they hit Return in the filename field:
perform a search. As it was, it was being interpreted as
"OK", which was never what I meant. Change the behavior to
match expectation, not vice versa (even though I deliberately
made the behavior this way).

Added a number-aware string comparator to e.util, though it's
not used yet. This would let file2.txt come before file10.txt,
and so on, were we to do directory displays once more.

2003-01-10 enh Bracknell

Run the file-finding for 'Open Quickly' in another thread, so
that Edit can still be responsive, and so the user gets to
see the progress bar. I use Sun's SwingWorker class for this,
which I've added to the e.util package.

2003-01-09 enh Bracknell

Split the "this file has been modified in the background" error
into two lines. Should alter Edit.showAlert to automatically
insert line breaks into long messages. Even ignoring font size,
every 72 characters would be a good idea.

2003-01-07 enh Bracknell

The behavior when you click "OK" in the 'Open Quickly' dialog
is now that if you haven't selected anything in the list,
everything gets opened (because you'd have clicked "Cancel" if
you didn't want to open anything), but if something's selected,
then only the selected files are opened.

Modified the file-finding code for the 'Open Quickly' dialog to
ignore files with uninteresting extensions, as elsewhere.

Added vim '.swp' files to the list on uninteresting extensions.

MacWorld San Fransisco keynote day.

2003-01-04 enh Bracknell

Radical changes to the "Open Quickly" dialog. There are now two
text fields: one for a root directory to search from, and another
for the filename fragment we're looking for. Hit Return in the
filename field and the little list will fill with the matching
files. There's also a progress bar that will appear with any
LAF supporting indeterminate progress bars (Motif doesn't seem
to, sadly) in case the search takes a while. Interestingly, it's
pretty darn quick. I was expecting to have to do some cunning
caching, and expected slowness was one of the reasons I put this
off for so long. There Is No Excuse For Not Doing The Right Thing
Just Because You Think It Would Be Slow. I haven't had the balls
to have it update as-you-type yet, but -- if you ran it in a
separate thread -- it would be trivial and, I reckon, plenty fast
enough.

Switched to checking that the fragment is in the absolute path
of the file, rather than the leafname, so it's possible to search
for things in a given directory more easily than modifying the
root directory (where you'd have to specify all intervening
directories, which you may not even know). This lets you open, say,
every file whose name contains "swing/Default", even if your root
directory is "/home/company/software/java/current/". Furthermore,
you could open these files from all available versions of Java by
chopping the "current/" suffix from the directory.

Commented out the "Open File Set" menu item so I'm only experimenting
with one new file-opening scheme at a time.

Added a switch-to-counterpart icon next to the close button if there's
a counterpart available. (The icon looks terrible though. I'd think of
copying the one in Project Builder if I hadn't singularly failed to
guess what that did either without clicking on it.) The functionality's
not as good as Project Builder's, which copes with .h/.m, .h/.c and
so on in addition to just .h/.cpp. This can easily be fixed by the first
person to have any use for it (I imagine my Objective-C development
will always be from Project Builder, for example).

Corrected typo in name of "Revert to Saved" menu item, and commented
out the functionality until it actually *confirms* that you want to
lose your changes (or keeps a backup).

2003-01-03 enh Bracknell

Merged some changes I hadn't propagated to work back into the
changes I made at work today. Must Not Make That Mistake.

Added "Open File Set" to the File menu. This lets you specify the
name of a file whose contents are a list of filenames, one per line.
The files corresponding to these filenames (after tilde expansion,
and with non-absolute paths converted into paths from the workspace
root) will be opened.

Fixed a bug with the search & replace dialog where it would throw an
exception if you removed the entire regex.

Made sure that the DISPLAY and HOME environment variables get passed
through to subprocesses.

Use the --login switch when invoking a subprocess via bash to increase
the chances of environment variables you rely actually being set when
your program gets run.

Change LinkFormatter's idea of an "address character" to not include
the '=' character, which appears in the output of bash's "set" builtin,
for example, but which is almost certainly not part of an address.

2002-12-29 enh Bracknell

Added e.tools.diff.DiffViewer utility. (It doesn't work yet, though!)

Close input stream in StringUtils.readFile.

Added "Revert to Saved" on File menu.

2002-12-19 enh Bracknell

Improved sfind and sgrep to cope with filenames containing spaces, newlines
and the like. (Some of Apple's developer examples' directory names contain
spaces.)

2002-12-17 enh Bracknell

Apple's Java 1.4.1DP6 uses the same (odd) alternative name for BACK_SPACE
as the other JDKs: "typed \010". This means we can simplify the code in
e.edit.ETextArea for setting up our backspace Action.

2002-12-14 enh Bracknell

Made Edit.openFile understand that a leading '~' means a home-relative
path, although I can't cope with ~ed/ or whatever because I can't think
of a way of finding other users' home directories in Java. (There's the
"user.home" property for the invoking user.)

2002-12-12 enh Bracknell

Double-clicking on a match in the Find/Replace preview list now jumps
to that line in the text window.

The matches now have the actual matching part highlighted in red. At
the moment this uses HTML text in a JLabel, which is okay as proof
of concept but doesn't really work in terms of setting the background
and foreground colors to fit the list items' selection state.

Passed the PATH environment variable through to Java from the shell
script, and through to subprocesses via the magic of System.getProperty.
Two of my three Java Bug Parade votes are now Runtime.exec-related.
Funny, that, because I'm sure it was the inability to start a subprocess
in a given directory that kept us from starting a Java rewrite of
Pike's acme for so long in the beginning...

Uses the current workspace's root directory as the 'Open Quickly'
start point if there's no current text window from which to take
context.

2002-12-11 enh Bracknell

Added EMonitoredTextField for all those interactive <x>-as-you-type
applications. Must migrate the old stuff over to this.

Added a JList to the "Find/Replace" dialog to show the lines that
match the current pattern. Not everyone's the regex masta that I am ;-)

Tried to add some intelligence to FormDialog to limit how large it's
prepared to get. It seemed to interact badly with the GridBagLayout and
JList in a JScrollPane combination I'm using though. I think maybe the
GridBagLayout is expecting every row to be a similar height? Even if it
had worked, at the moment no attempt is made to achieve a pleasing
aspect ratio. This should also be fixed. But the idea is there. Next
time I've a moment or two, I'll fix things so double-clicking on a line
jumps to that line in the editor, in case you want to see the full
context. There should also be a way of saying "only do the replacement
in the selected lines". To do this, I'll probably need to store a line
number along with each String. I should also store the start and end
offsets within the line of the match, so that a new CellRenderer can
somehow highlight the matching portion of the line (GNU grep 2.5 is
very useful because of this: not only are such lists of matches easier
to look at, if you're experimenting with a regex it's useful to see
exactly what it's matching). Anyway, bollox to it: bed-time.

2002-12-07 enh Bracknell

Implemented 'Scroll to Selection' for the 'Find' menu.

Added the existing 'Go to Line' to the 'Find' menu. Project Builder has
a better dialog than us though: it lets you go to a character offset too,
and has a checkbox that tells it to monitor caret motion so you can see
where you are if you want to.

Split the various bits of find functionality off the 'Edit' menu
and onto a new 'Find' menu, like Project Builder.

Corrected 'New File...' and 'Open Quickly...' to work when there's
no currently-focused text.

Modified EDirectoryWindow's old, forgotten 'New File...' functionality
to live off the 'File' menu. Can we lose EDirectoryWindow yet?

2002-12-06 enh Bracknell

Fixed "Open Quickly" to use CS-D (like Project Builder) instead
of C-D (which means anything but 'open' to a Unix user!).

Changed the ExternalToolAction stuff to use environment variables
rather than rewriting commands. What prompted me to do this was
the experience Ed had with Windows where a \\windows\style\path
got clobbered because the regex rewriting was treating the backslashes
as meaningful. I'm not convinced we won't have trouble with the
environment variables because Java doesn't really support them
whole-heartedly. You can't read them as of 1.4.1 (an exception
is thrown if you call System.getenv) and the only way to set them
is an exclusive set: you can't say (as far as I can tell) "add
these definitions". Which is a pain.

Added a new sub-property tools.<x>.needsFile to replace the previous
test that checked for a "%f" in the command.

Moved the versions of sgrep and sfind I wrote at home into edit's
directory and modified them and esgrep (which is like sgrep but
produces absolute-path results for convenient use with Edit) to
look for one another in the directory they're run from (as
distinct from the directory they're run in).

Modified the "Shell Window..." command to work on Mac OS X and,
probably, Windows.

2002-12-03 enh Bracknell

Added a new menu item & dialog that lets you open a file by just
typing its name. This is what Apple's Project Builder has, and I'm
just interested to see how that works out compared to our current
open dialog. Let them fight it out in the wild for my affection,
and see which one wins, or what springs to mind.

Added a new menu item & dialog that lets you change the end-of-line
string (so if you loaded a Windows file, it would say "\r\n" and you
could edit that to "\n", save, and you've got a Unix file). It also
lets you change the indent string, but that only affects future
indentation.

Improved the Bird's-Eye View (it's called BirdView in
the source) by fixing a couple of bugs and hard-coding some
reasonable offsets for Mac OS X scrollbar decorations. I suppose
in the short term I could perfect those numbers and then ---
depending on what OS we're running on --- either use them or the
reflection scheme to work out where the Bird's-Eye View should
go.

2002-12-02 enh Bracknell

Tried to write reflection code to find out where the usable part
of the scrollbar is so that the Bird's-Eye View can line up properly
with that part, and not be at the wrong scale because it includes the
scroll arrows and so forth. I've got something that works for Windows
and Linux, but Mac OS X doesn't subclass Sun's BasicScrollBarUI. When
I changed my code so this didn't matter, I found that Apple's
getTrackBounds always seems to return an empty Rectangle at (0,0).

2002-11-29 enh Bracknell

Started to experiment with a Bird's-Eye View, a component next to
the scrollbar that shows where the matches for the current search
string are in the document so that you can more easily scroll to
them, or just get a feel for where they are.

2002-11-28 enh Bracknell

Added e.tools.TableViewer, which is a command-line tool for viewing
tab-separated data (something "|less" isn't very good for). Instead
of output that doesn't line up, you get a nice Swing table.

Removed the immediate feedback because it led to a race condition
that caused a UI hang. Which seems odd, because surely what was
going on there was no different to how that code's supposed to
operate normally?

2002-11-22 enh Bracknell

Added some immediate feedback that a task has started/finished. For
now, it's nothing more than a line written to +Errors when the task
starts (telling you what's started, and in what directory) and when
it finishes. Ed can think up a better way of showing how many/what
tasks are running.

Removed the e.swing.text.rtf stuff: if you're not using a thing, get
rid of it. There are better RTF editors (TextEdit.app and write.exe
spring to mind), and I'm still not convinced it's useful compared to
text/plain and text/html.

2002-11-21 enh Bracknell

Implemented a simple regular-expression find/replace dialog. It doesn't
incorporate Ed's idea of the preview, but it does show how to do regex
find/replace, and how to make the whole operation seem like a single
UndoableEdit (without cheating and replacing the entire file). Cool.

2002-11-20 enh Bracknell

Fixed the problem caused by removing various NAME fields last night:
it turns out they are used, they're what connects Actions to KeyStrokes
via the map. Because Action itself contains a field NAME (value "Name",
used for its NAME property), my removal of these fields didn't cause
any compile errors, even from clean. It just produced code that was
doing the wrong look-up at runtime.

It's not necessary for ExternalToolAction to check super.isEnabled: why
does it care what its superclass thinks? It's behavior is *less*
restrictive, not more restrictive.

2002-11-19 enh Bracknell

Improved the error reporting across Edit. There's a new method in
Edit, showAlert, that can be used in case of failure to do what
the user asked. At the moment it uses JOptionPane, but it will be
easy to change that in future.

Filled out the Edit menu to aid discoverability. Added a
'Build Project' item to the Tools menu, again to aid discoverability. 
Removed the Workspace menu until such time as I can be bothered to
implement it.

Added the edit home directory to the path of the process running
Edit so you can automatically take advantage of the esgrep script.
A better idea would probably be to have a bin directory within
the edit directory, where scripts useful in conjunction with Edit
could be stored.

Factored out the code for finding the focused text window (choosing
the best of the three alternatives that were floating around) into
ETextAction.

2002-11-18 enh Bracknell

Swapped the "Directory" and "Command" fields in the new dialog
so that the command comes first (and gets initial focus). Switched
to JTextField and nominated the OK button as the JRootPane's default
button so you can just press Return in one of the text fields to run
the command.

Modified build.xml so we don't include .bak files in the distribution.

Modified build.xml so we have execute permission on the edit shell
script and the newly-included esgrep wrapper for sgrep that ensures
that ./relative/paths/to/files.txt get rewritten as absolute paths.

2002-11-17 enh Bracknell

Modified the external tools to take an optional extra argument
specifying whether or not to open a dialog requesting confirmation
before running the command. The dialog shows both the command
and the directory in which it will be run. This allows for a generic
"Run Command..." menu item as well as a simple interface to grep,
which requires a search pattern before it can be run.

Introduces e.forms, a simple way of creating form-based GUIs. At
the moment it's laughably simple, but I'd like to make it at least
as good as others I've worked on in the past.

2002-11-15 enh Bracknell

Adds the CLI command e.tools.HtmlViewer which takes the name of an HTML
file as an argument and opens a window in the center of the screen with
the HTML rendered in it. This is sometimes more convenient than mailing
HTML to yourself to view in Outlook.

Fixes an error where "%r" was being replaced in a copy of the original
command, thus losing the preceeding "%f" replacement.

Adds debugging output to ShellCommand so that the log contains the text
of any command we execute, and the directory in which it's executed.

Removes the arbitrary limit of 100 edits from UndoManager with a subclass
UnlimitedUndoManager. The only limit now is the amount of available
heap. There's still the problem of the overly-fine granularity, though.

If you undo all changes (now we can tell that's what's happened since
we know that nothing's thrown away), the document is marked as being
clean again.

2002-11-14 enh Bracknell

Check more carefully for the focused text window in ExternalToolCommand
so that we can run tools when there's no focused text window.

Tool menu items that correspond to commands that use "%f" are now disabled
if there's no currently-focused text window.

Moved the workspace tabs to the left-hand side if we're running on
Mac OS X - Apple's Java 1.4.1 does them properly, unlike any of Sun's
Javas (otherwise I'd use that everywhere).

ExternalToolCommand commands can now use "%r" to refer to the root
directory of the current workspace.

2002-11-13 enh Bracknell

The command for an ExternalTool defined in the properties file
can now contain "%f" which will be replaced at run-time by the
filename of the currently selected file. This lets me, for example,
implement a "Revision History" command that does a "bk revtool"
on the current file.

2002-11-01 enh Bracknell

Removed some old junk that hadn't been used in a long time.

2002-10-31 enh Bracknell

Made EErrorsWindows get the focus when they appear. Made
CloseWindowAction work on EErrorsWindows too. All we need
now is for C-W to work in an EErrorsWindow (how do we make
the accelerators for our menu items work all through the
application?).

2002-10-30 enh Bracknell

Errors windows now show when they have the focus by coloring
their title bars like other windows. You still can't C-W an errors
window, though. That action should come out of the per-window
keymaps and become application-wide. If only I could remember
whether that works or not...

When a window (in a column) is closed, there's now some
debugging output printed. There's something not right here:
sometimes focus just gets lost. I want to find out where it's
going, and why.

2002-10-29 enh Bracknell

Happy birthday, Ruth.

Each Workspace now has its own open dialog. I've also gone through
removing a lot of unnecessary code for finding/keeping track of
parent Frames. There is only one parent frame, and Edit.getFrame
returns it.

Telnet windows now give focus to the input field when a username or
password dialog goes away.

Works around an error where escape sequences such as [1;31m weren't
being interpreted correctly. They're still not correct (it's not
easy to see how to do the additive styles, particularly because
we try to be too clever and make things like yellow-on-white more
visible) but hopefully they should be less obviously wrong now. I
admit that combinations involving underlining are still hopeless
but they're not as common as [1;31m will be when the Linux
distributions start including GNU grep 2.5 and people start using
the --color option.

Commented out some more uninteresting debugging output.

2002-10-28 enh Bracknell

Fixed a bug with the find dialog; the timer should have had
repeats disabled. As it was, once you'd found something with
the dialog, you couldn't move the selection. It was probably
doing unnecessary finds too, but I never noticed that. (Computers
are fast!)

2002-10-27 enh Bracknell

Improved ETelnetWindow. I think our behavior is now closer to what
it should be. It certainly seems to have cured the "funny characters
when you first telnet" that was bothering Ed. The TELNET code really
needs to be factored out into its own TelnetInputStream and
TelnetOutputStream classes.

I think I also added the form of password prompt (" password:") that
ssh was annoying Ed with. I wonder if that will produce any annoying
false-positives? I'm quite surprised that the others haven't (yet).

Fixed some of the more spurious stuff that was getting written to
the log (by the indentation-correction code and the workspace advisor
code). I was getting tired of scanning past that (and presumably
paying the price for outputting it in the first place).

2002-10-25 enh Bracknell

External tool commands now run in the directory of the currently
selected text. If there is no currently selected text, the
current workspace and its root directory are used.

You can now specify what command should be run as 'make' with
the C-B build action. So Windows users can specify nmake.exe
and I can run a script that parses & reformats the output.

Ed pointed out that edit.log was getting included in the
distribution. No longer.

2002-10-24 enh Bracknell

Added the ability to specify command-line tools in the properties
file that automatically get entries on the "Tools" menu. I use
this on Linux to run "bk citool" for the repository I'm in. That's
one less reason to start a shell.

2002-10-23 enh Bracknell

Forced the background for ETextArea to white (yeah, this should also
be a preference). Motif's default blue-gray is starting to depress
me, and I don't like the way it's the same color as everything else.
Editable text deserves to stand out a little.

Would this be better done as a UIManager.put, so that I could make
editable text fields have white backgrounds too? (Isn't that how
Motif's supposed to look anyway, these days, or was that OpenLook?)

2002-10-21 enh Bracknell

Added Timers in OpenDialog and FindDialog to try and improve the user
experience. Find is nice now: it's incremental, but waits for you to
stop typing for half a second (these delays should be configurable;
different people have different typing speeds) before it slows your
computer down by actually searching. OpenDialog is getting better,
but it's still not perfect. It now should let you backspace past a
single-letter directory, and it selects any text it enters so you have
to explicitly accept its suggestion. I'm not sure what it wants next,
but I don't think it's quite right yet.

Modified the key binding code to add bindings for C-C, C-V and C-X so
that if you're using the Motif LAF on Linux you don't have to hunt for
the non-existant COPY, PASTE and CUT keys that would be on your Sun
type 4 keyboard if you had one.

2002-09-24 enh Bracknell

Fixed the escape code handling to cope with "00". Is this a special case
or should all 'm' numbers be treated as numbers rather than strings (so
leading zeroes get ignored)?

Added telnet.defaultHost to set the default host for a telnet session.

Made OpenDialog sort names, with all directories coming before all files.
Also made the table show a file separator character after the names of
directories.

Made OpenDialog start in the current workspace's root directory rather
than the directory Edit started in. Removed some debugging output.

2002-09-17 enh Bracknell

Don't show grid lines in the OpenDialog table on Windows. (OS X has them
turned off by default, so I didn't notice.)

2002-09-15 enh Bracknell

Added working "Use Proportional Font" and "Use Fixed Font" items to the "View"
menu.

Added a couple more menu accelerator keys. It seems to be the case that these
work as long as you never actually select anything from a menu. If you do
that, they're broken from then on. This is a real pain (but would be more
of a pain if I used the menu items much).

2002-09-14 enh Bracknell

Switched to OpenDialog from the standard system dialog. Removed the right-hand
column of directory windows. Improved OpenDialog in various ways now I actually
have to use it full-time. At the moment, what we've lost is our grep-equivalent and
the ability to create new files. I'm thinking of some sort of "New" and "Save As..."
to cover the latter, and hopefully factoring the display out of the ETelnetWindow so
I can have EShellWindow. Then I can do my grepping et cetera from there. Oh
yeah, another thing is that you won't be able to jump to a file that isn't already
open now; there's no selection of directory windows to look in. There's a FIXME
comment that suggests one place search code might go in. I think we need some
kind of UI on this though, because it might take a while to search a hierarchy of
9,000 files on the other side of a CIFS connection, and because -- if we're revisiting
this area -- we should deal more intelligently with situations where there are more
than one plausible match.

Would it be acceptable (would it be good?) to have a way of saying "scan the
filesystem starting at the point I tell you"? Edit could reuse that list cheaply, and
the act of asking for it would make it less annoying that Edit's gone away (I guess
you'd do it once when you start, and maybe each time you "bk pull" or
"cvs update" or otherwise add new files).

2002-08-29 enh Bracknell

ETextAction: invented a class to hold the code to check whether an Action should
be enabled or not based on what component has focus.

Added CloseWindowAction, UndoAction and RedoAction.

2002-08-28 enh Bracknell

EditMenuBar: added routines to traverse the menu bar when it's popped up and
make sure that the JMenuItem's enabled state corresponds to its Action's enabled
state. Quite why it doesn't do it itself, I've no idea. Modified SaveAction to check
that the component with focus is an ETextComponent.

Added an Edit menu to the menu bar. Empty as yet.

2002-08-27 enh Bracknell

EWindow.MenuMouseListener.handle now requests focus on the
component the menu's attached to. On OS X, this means that the
menu applies to the text you requested it on (good) but the titlebar
doesn't get redrawn to indicate the change of focus until the menu
goes down (bad).

EWindow.MenuMouseListener.handle now uses invokeLater to pop
up the menu, which seems to give enough time to process the
focus request and get the titlebar repainted.

2002-08-22 enh Bracknell

Switched to a subclass of JTabbedPane that uses Lee Ann Rucker's
code for vertical tabs. Looks really nice on Mac OS X (though it
would be better if com.apple.macosx.smallTabs made the tabs
smaller, rather than just the text --- how can I fix that?). On
Windows, though, it looks really terrible. It's hard to tell
which is the selected tab, and the vertical text is illegible.

Tried forcing anti-aliasing on to improve Windows' appearance.
Still looks shite.

Added a tooltip to each tab, showing that workspace's root.

If we're on Mac OS X, the tabs go at the left. If we're not, they
go at the top. Tabs at the side on Windows looks awful, and on
Motif is only barely acceptable. Only OS X seems to have good
enough font rendering for it to work.

Improved build.xml to include 'clean' and 'dist' targets, to
use jikes by default and to list the files it's compiling as
it compiles them. Moved the source into subdirectory src/.

Corrected an incorrect package statement in e.gui.ArrayListTableModel,
though I don't understand why none of the compilers warned about this.
(I noticed that ant was keen to recompile it every time.)

Adds a space before and after a label to be drawn vertically,
giving padding that looks equivalent to what Aqua uses.

2002-08-16 enh Bracknell

Made directory windows request focus for their lists.

Changed title bar behavior so that a window gets focused when its
titlebar sees a button press, not a click.

Titlebars now use system's titlebar font.

When you close a window, focus now goes to the window that got
the extra space.

2002-08-15 enh Bracknell

Added the ability to choose a separate pair of colors for the
gradient paint used with unfocused windows.

Added the ability to override Edit's choice of LAF. Modified
the default properties file to use the Motif LAF on Linux, which
is rank, but still better than the Java LAF. (What were they on?)

Removed the ability to choose the titlebar gradient colors, choosing
instead to use whatever the LAF has for InternalFrame titlebars.

Improved focus assignment by ensuring that EWindow subclasses (which
are the things most likely to have requestFocus invoked on them by
others in an attempt to donate focus) actually pass the request on
to their focusable subcomponents (e.g. the text area within a text
window or the text field within a telnet window).

If a titlebar is clicked on, it tries to give focus to its window.

2002-08-14 enh Bracknell

Directory windows now show when they have the focus too. Moved the
focus-listening code up into EWindow. Still needs the subclasses to
manually addFocusListener for the right component though (need this
be so?).

2002-08-13 enh Bracknell

Changed find-previous and find-next to C-D and C-G (like Mac OS X).
Moved go-to-line to C-L for want of a better place.

Only the window with the focus gets the purple-lilac gradiant now.
Other windows are gray. I think this is a good idea, because I
sometimes get confused (particularly after I've closed a window
with C-W). I think Ed needs to look at the appearance, though.

2002-08-11 enh Bracknell

Reinstated (a somewhat improved version of) the home-grown
open dialog. The "Open..." item on the menu bar behaves as before
for the time being, offering the system's native open dialog, but
C-O in a text window will bring up our dialog, which is hopefully
quicker to use. And if it isn't, we'd best change it until it is...

2002-08-10 enh Bracknell

Puts the caret in the right place when you type '}'. That whole bit
of code's getting a bit hairy. Must that be so? Is it in the nature of
heuristics to be hairy? Would the only way to get something better (in
all senses) be to actually parse the source?

First go at automatically correcting the indentation of pasted text.

2002-08-09 enh Bracknell

Puts the caret in the right place when you hit Return with the caret
part-way through a line. Previously the caret always went to the end
of the line, which was fine if you weren't shunting text down onto a
new line, but was weird if you were, with the caret appearing before
the text.

Makes mouse cursor warping optional. Let's face it: it's never worked
on Linux anyway, and probably never will. It's now off by default, but
my properties file manually turns it on for all OSes but Linux.

2002-08-06 enh Bracknell

Broke JavaDoc auto-indenting so that there's only one piece of code
that deals with correcting indentation. I'll work the functionality
into that.

Added a new action to correct the indentation of a line if you type a
closing brace as the first character on it. Took me ages to work out
the syntax to bind this action to the '}' key, though. Damn you, Swing!
Seems that the trick with a binding like this (that would normally
insert a character) is to use the getKeyStroke overloading that takes
a Character instance.

Autoindent should only copy a "*" following whitespace if the character
after is whitespace; otherwise the line after code like "*ptr++ = i;" is
wrong. Binary "*" on wrapped lines will still cause trouble, though,
unless you're one of those people who doesn't put spaces around operators.

2002-08-04 enh Bracknell

Autoindenting now understands JavaDoc comments. If the last line ended
"/**" indent by the usual amount plus " *": if the user wants to comment,
they need only type a single space, if the comment's finished, a single
"/". Auto-indent now copies '*' as well as whitespace, stopping immediately
afterwards because otherwise it's annoying when you want to close the
comment. [The trade-off being that for every line but the last you have to
type a space.] People who break long lines, and break so that continued lines
begin with punctuation may find Edit insert extraneous asterisks, because
it doesn't know whether or not it's in a comment. Autoindent correctly
doesn't copy the last " " from the whitespace on the line before if that
line ended "*/". This will be wrong in cases where legacy coders aren't using
JavaDoc style comments but are using space-tabs. We could maybe only copy
multiples of indentString if the previous line ended in "*/"? Or they could use
JavaDoc comments. For now, I vote for the latter.

Happy Birthday, Christina.

2002-08-03 enh Bracknell

Re-arranged the code that gets run at start-up to try to make Edit appear to start
faster. So now, though Edit still takes about 7s to be ready for action, it has a
window on the screen in under 3s, so at least it feels like it's making progress. It has
a go at updating the display for each workspace (and thus tab) added.

2002-07-25 enh Bracknell

NumberResearcher now also tries to interpret hex numbers as ASCII strings,
so 0x46494c45 comes out as "FILE", for example.

2002-07-17 enh Bracknell

Only auto-scrolls TELNET sessions if the scrollbar is already 'close' to
the end. This is a bit hacky (a number of pixels) at the moment, and should
really relate to the height of a line or something.

2002-07-12 enh Bracknell

Improves NumberResearcher to display the selected number in all the other
common geek bases (hex, decimal, octal and binary).

Switches to using our own StartOfLineAction. The built-in one has silly
behavior where 'start of line' means start of physical, not logical line.
So if you're on the second chunk of a long wrapped logical line, you go to
the start of that chunk. Which isn't very useful, certainly not to a
programmer.

Improves Ant support by using the right command-line options to get Ant
to be less verbose in its output. If it doesn't prefix each command's output
with the name of the command, we can understand the errors just like we
could for make. In theory Ant's behavior could be useful: if we wanted to
support a variety of tools with a variety of output styles, this would help us
know what we were dealing with. I think ProjectBuilder works like this.

2002-07-09 enh Bracknell

Adds basic support for Ant as well as make.

Factors getWorkspace up into EWindow.

Changes the researcher stuff to work on JTextComponent so we can
offer it for TELNET windows too.

2002-06-20 enh Bracknell

Fixes a mistake with the End action if you're on the last line of a file.

2002-06-14 enh Bracknell

If the user selects more than a line, don't tell the WorkspaceResearchers.
They only waste CPU time. (Which wouldn't be half as annoying if we hadn't
lost Ed's multi-threaded research changes.)

2002-06-13 enh Bracknell

After a colon, only numbers are acceptable parts of links. I've changed
LinkFormatter to differentiate between acceptable link characters before
we've seen a colon, and acceptable link characters after we've seen a colon.
It makes the automatic link marking seem more accurate, and reduces user
anxiety about what clicking a link that has junk at the end will actually
do.

2002-06-11 enh Bracknell

Submitted a bug with Sun about the cursor-down not working if the
next line is empty. This used to work in 1.3.1 but is broken in 1.4.0,
which is why it works on Mac OS X.

Added UML visibility notation to the 'contents' dialog. It doesn't
work very well with a non-fixed font, mind. That whole thing needs
some work.

Added path rewriting so that a non-local OS path like
"/home/elliotth/src/cmd/cat.c" can be translated into a local OS path
like "u:\elliotth\src\cmd\cat.c" by replacing the "/home/" part
with "u:\". This is far more useful than it sounds, used in combination
with TELNET.

2002-06-10 enh Bracknell

Merged in changes I'd made at work (see 2002-05-07) but not taken home.

Stopped creating a workspace for the current directory. Question: is
this right? Do we need a better heuristic, one that takes into account
what workspaces are available?

2002-06-08 enh Bracknell

Brought back some tags functionality. Rather than rely on having a tags file
available, we now generate one on-the-fly for the current file. C-T (or a menu
item) brings up a dialog showing the 'contents' of the current file. Double-clicking
on an item takes you to it. To get the tags, we invoke 'Exuberant Ctags'.
Hopefully there's a Win32 version I can download on Monday! Currently we
don't cope well with inner classes in Java, don't give any indication of access
modifiers, and only have a textual notation for the kinds of tags (I've a feeling
that -- although you'd have to learn them initially -- it would be easier if we
used icons to distinguish methods from fields, et cetera).

Made 'End' go to the end of the physical, not logical, line. That is, if you're
on a wrapped line, 'End' takes you to the character before the newline, not
to the end of the wrapped chunk you're in (which may or may not be where
the newline is).

Improved the NumberResearcher a bit: it no longer throws exceptions
when the selection isn't a number, and it doesn't assume that numbers
beginning with a leading '0' are octal. That's a stupid, irresponsible habit
in this day and age.

Re-enabled the advisor, as an EWindow this time. For some reason
exceptions are thrown at start-up. Maybe Ed can shed some light on this?

2002-05-07 enh Bracknell

Changed telnet menu item to reflect the fact that it opens a dialog.

Fixed telnet hostname dialog to not try to open 'null' if you click
cancel.

2002-04-30 enh Bracknell

Made the telnet window output editable, because it would have been
useful yesterday when going through a lot of grep output to be able
to remove the ones we'd dealt with.

Made the find dialog try harder to remember the strings that have
been searched for. Implemented an alternative history model that's
chronological rather than alphabetical (which didn't seem to be particularly
useful in this context).

2002-04-28 enh Bracknell

Got rid of the big split across the bottom. Made errors windows
closeable, and made them automatically respawn if there's new
errors output.

Fixed a stupid mistake that had broken non-recursive file searching.

2002-04-27 enh Bracknell

Got rid of the guide file stuff to see if Ed shouts, since he didn't
answer my question as to whether he still uses it.

Made Edit read its properties file as first thing it does.

Added (and then commented back out while I think about it)
simple support for Apple's Java Spelling Correction library.

2002-04-26 enh Bracknell

Made the telnet menu item open the telnet window on the current
workspace, rather than the (misguided & broken notion of the)
default workspace.

2002-04-25 enh Bracknell

Added a menu bar with an Exit option for Windows users (Mac users
have one automatically provided), and an Open option for access to
the system's open file dialog, which is a handy work-around for our
lack of support for Window's stuff above the individual drive root
directories. There are dummy items for telnet and adding/removing
workspaces.

Added menu item & interface to telnet. For the first time, this is
no longer a hidden feature.

2002-04-05 enh Bracknell

Merged in Ed's changes that put the advisors in the bottom
right corner.

2002-04-03 enh Bracknell

+ Made ETelnetWindow understand RIS, which is what you send
to really reset the terminal. Might be nice to handle 'weak' resets
that don't affect scrollback, but how? Behave as if we've seen RIS?

+ Made the default action on the telnet input line select all
rather than clearing the field. That way, the fairly common case
of wanting to re-run the last command ("clear;make") reduces to
just hitting Return again. This is until EHistoryTextField's model
is able to store things in chronological order as well as the
current alphabetical order. (Question: does alphabetical order
make any sense? Even for the find dialog, I find it questionable
in use.)

2002-04-02 enh Bracknell

+ Fixed an annoying bug whereby each time you typed a character
into the find window, the text window would regain focus. So the
find window would disappear and you'd be typing in your text.

2002-03-31 enh Bracknell

+ Added a work-around for the Swing highlighter's trouble in keeping
the highlight consistent with the selection if the selection is
changed with shift+arrow keys.

+ Also force redraws for all mouse movement that occurs while a
button is down to combat the same problem.

+ Made the find dialog (and hence also find-previous and find-next)
use the code that tries to land the selection in the center of the
window when scrolling.

2002-03-26 enh Bracknell

+ Reintroduced incremental searching with C-F. You don't realize
how important that is to the user experience until you accidentally
break it!

+ Merged in Ed's current advisor system.

+ Stopped the telnet window's caret blinking.

2002-03-24 enh Bracknell
+ Fixed a bug that was caused C-N and C-P to fail if you hadn't previously
  used C-F.
+ Fixed a bug in the bracket-matching code where if you had two open parens
  next to one another -- C-style casts, for example -- clicking between them
  matched with the wrong closing parenthesis.
+ Wrote an EHistoryTextField to replace ETextField in the find dialog and
  telnet windows. At the moment, all it does is remember previous values
  an show them in a combo box. And it looks terrible. And doesn't work very
  well on Linux.
+ Made the new field look less stinky by removing the text field's border;
  the combo box border is enough.

2002-03-21 enh Bracknell
+ EDialog is now less restrictive about the text components it's prepared
  to give the focus to when displayed.
+ ETelnetWindow's PromptDialog now has the "user.name" property as the
  default for a username.

2002-03-20 enh Bracknell
+ LinkFormatter tries harder to cope properly with URLs and Windows paths
  starting with drive specifications.
+ Corrected the case of "url.prefixes" in Workspace.openFile.
+ Added popup menus to telnet and errors windows. Both have 'Clear' items,
  and the telnet menu has 'Interrupt' too.
+ Removed the 'Stop' button from telnet windows.
+ Got rid of the old login dialog and replaced it with a simpler 'prompt'
  dialog that pops up once for each entry. This also works for stuff like
  the su(1) command. It copes pretty nicely with failed logins too.
+ Modified ETelnetWindow to cope with trailing slashes, which are fairly
  common with URLs, and perfectly legal.

2002-03-18 enh Bracknell
+ Fixed a stupid bug in the javadoc action constructor; it wasn't keeping
  a copy of its argument for later.
+ Wrapped the scrollRectToVisible invocation in LinkFormatter in a
  SwingUtilities.invokeLater to prevent whole hosts of BoxLayout exceptions.
  It doesn't look like that code's thread-safe (any more; it works on 1.3.1).
+ Changed the default caret color to be red, just like the old days.
+ Modified isIgnored to defer to isIgnoredDirectory if the File corresponds
  to a directory.
+ Added some BlueArc-specific uninteresting directories to the list in the
  properties file.
+ Made files or directories whose name begins with "." uninteresting.
+ Had a go at adding a level above c:\ et cetera corresponding to "My Computer",
  but couldn't really come up with anything that looked like it was going to
  work out. Ugh.
+ Added support for sending telnet terminal type information. We lie and
  claim to be a vt100, because then bash doesn't insist on printing the
  prompt twice.
+ Put in a quick hack to ignore attempts to set the window title. In future
  we might want to actually use the information, but for now we just ensure
  it doesn't mess up the display because we don't really understand many
  escape sequences. I don't want to write a proper parser if I can avoid it,
  because I'm not really interested in emulating a terminal!

2002-03-17 enh Bracknell
+ Primitive support for logging in to a TELNET server via a username/password
  dialog. In retrospect, I reckon I could have done something much better in
  the time I spent fighting GridBagLayout, but the better idea only came to me
  afterwards anyway.
+ Pulled JavaDocAction out into its own file. All the other actions should
  probably come out, and possibly be moved into a new package: e.edit.actions?
+ Stopped using jikes because it seems to compile Edit incorrectly. (An NPE is
  thrown in the code that's supposed to send the password from the TELNET
  login dialog; compiled with javac this doesn't happen.)
+ Added a telnet.retroLook property so the user can choose between windows
  that look like the other editor windows, or windows that vaguely resemble
  SGI's xwsh, and the configuration I've used for every terminal emulator I've
  had to use since then.
+ Threw out some of the unused code in ETextWindow that won't ever be
  used again.

2002-03-16 enh Bracknell
+ Switched to jikes for faster compile times.
+ Worked out that bash doesn't display the prompt twice if you set TERM to
  vt100. I need to have a read of the RFC about environment variables, I think.
+ Added a 'Stop' button to telnet windows to interrupt the current process by
  sending IAC IP.
+ Switched to using the user-defined font for telnet windows too. This isn't
  necessarily the best idea. Maybe, as with wily, the user should configure both
  a preferred variable-width and monospaced font?
+ Switched orange for yellow because yellow's just too subtle against a white
  background. Made all the colored text bold to help it stand out.
+ Made telnet windows work more like errors windows, at least in terms of
  displaying links.
+ Factored the link monitoring out of EErrorsWindow, and made both the
  errors window and telnet code use it. Id est, you can now click on links in
  the telnet windows.
+ Factored the link formatting out of the errors and telnet windows, smoothed
  over the differences and used the same new LinkFormatter class for both.
+ Improved LinkFormatter's heuristics to stop it highlighting past a colon if it's
  not a line/column number following.
+ Found out that Ali G's uncle Jamal runs the Taj Mahal in Bracknell.

2002-03-15 enh Bracknell
+ Stopped reading the keyboard file because we don't use it any longer. Need
  to review the removal of that stuff though.
+ Made EDirectoryWindow configure its JList to use the user-specified font.

2002-03-14 enh Bracknell
+ Imported the properties I use at work.
+ Switched to a new Highlighter, based on Scott Violet's suggestion to fix my selection
  highlighting problems.
+ Removed a useless method from my HighlightPainter, pointed out by Scott Violet.
+ Made the errors window use the configured font rather than whatever the platform
  default happens to be. (OS X was nice, Linux was nice, but Windows sucked.)
+ RTF documents can now be saved, but at the loss of some of the formatting
  information. Looks like Swing doesn't really support RTF all that well.
+ Made my HighlightPainter's mouseReleased force a redraw to work round Sun's
  assumption that you don't want to highlight past the end of the text.
+ Fixed the unfortunate interaction between double-click past the end of a line and
  triple-click by selecting the line from the selection start rather than the dot.
+ Made backspace even more intelligent. It now copes better with situations where
  you're not deleting from the end of the leading whitespace.

2002-03-13 enh Bracknell
+ Rewrote the key binding code in ETextArea. I still don't like it, but at least now it should
  automatically handle Windows/OS X differences.
+ Made the errors window link recognition code clever enough to cope with gcc's output
  as well as javac's. Also ignore the commonest false positive from make.
+ Made the errors window link selection code clever enough to cope with the new kinds
  of links.
+ Fixed double-clicking past the end of the line so that it selects the whole line.
+ Preliminary .rtf and .rtfd support.
+ Copied & modified the Swing RTF package, extending it to support images, at least in
  Apple/NeXT .rtfd files, which are easy. I haven't worked out the embedded BMP format
  Microsoft use.
+ Switched to ECaret for rich text documents, but not for the errors window:
  ECaret will need some modification before it will work at all in that
  context.
+ Renabled the telnet:// handling.

2002-03-10 enh Bracknell
+ Added a margin to ETextArea. This should improve Windows cosmetics, and makes
  selecting lines easier on OS X.
+ Modified ECaret after realizing that one of the reasons Swing text components seem
  sluggish when selecting text is that they select in mouseClicked rather than mousePressed,
  whereas native text components work on the press.
+ Commented out the code to automatically open TELNET sessions.
+ Removed click count debugging code.
+ Factored menu handling code up into EWindow.
+ Added menu options for zooming to EImageWindow.
+ Toyed with some indication of the number of items in a directory window, but didn't
  come up with anything I liked.
+ Retired the EHTMLWindow because no platform is without a browser of some description,
  and users would be better off using their platform's browser than a half-hearted effort
  that isn't even used by its own author.
+ Retired the old 'E' scrolling stuff. Nothing uses it any longer.

2002-03-09 enh Bracknell
+ The input line is now disabled when a TELNET session closes.
+ Made the text no longer editable; it's too tempting to try to type in it.
+ Improved the logic for removing find highlights when the text is edited without
  obviously harming efficiency. (If we don't keep track of whether there are any
  highlights to remove, it's quite expensive to get and check for highlights that
  should be removed.)
+ The find dialog now selects its text when shown, and removes any out-of-date
  messages about numbers of matches.
+ The goto dialog now selects its text when shown, and now shows the correct line
  number.

2002-03-08 enh Bracknell
+ Made Workspace.openFiles realize that there are some things Edit just doesn't
  want to handle (QuickTime movies, say) and should call open(1) or Windows start
  for instead.
+ Moved the lists of extensions that shouldn't be display or that should be treated
  as binary files into the properties file.
+ Added a way of having different settings for different operating systems in the same
  configuration file.
+ Made the list of prefixes that imply URLs (and therefore imply that we should defer
  to the system web browser) a configuration item. Added some missing prefixes.
+ Corrected the name of the new file action to indicate that it opens a dialog.
+ Modified the TELNET code to use a JTextPane.
+ 'Borrowed' the SimpleTextEdit example's icons file.
+ Implemented ANSI character attribute escape sequences.

2002-03-07 enh Bracknell
+ Made the new file action refresh the display.
+ Added a few TeX extensions to the list of uninteresting files.
+ Added a few Mac OS X extensions to the list of binary files.
+ Made ETitleBar use the ~ notation to represent the user's home directory.
+ Fixed an error in the correct-indentation action that meant it would try
  to position the caret past the end of the file if you used it on the last line.

2002-03-03 enh Bracknell
+ Added C-{ shortcut to insert a brace pair.
+ Added 'new file' menu option to directory windows.
+ Set a title on each of the dialogs, slightly reworded the labels to fit.
+ Switched to using JLabel instead of ELabel so the fonts fit in better.

2002-03-01 enh Bracknell
+ Fixed backspace for OS X: it needs to be "BACK_SPACE" and not any
  of the alternatives.
+ Made a distinction between files ignored for searching and files ignored
  in directory displays. There's a lot more to be done in this direction: for
  one thing it would be good to have this configurable!
+ Fixed EImageWindow to use a JScrollBar; also added title-bar information
  about the image's width & height. Edit still needs its sibling Paint program.
+ Added the correct-indentation command (on C-I) to, well, correct the
  indentation of the line you're on, based on the line above. Assuming you'll
  then want to do the next line, that's where the caret ends up. You can just
  hold down C-I to reformat a whole file. Might it be worth looking at doing
  this when you paste?
+ Fixed a bug in Workspace.openFile that meant it wouldn't strip the ./ from
  such a path, and then wouldn't match with the titles of the files it's got open.
  That code could really stand a rewrite...
+ Fixed the clearing of the errors window.
+ Disabled the errors window's auto-scroll.
+ Added find-next and find-previous, currently on C-N and C-P.

2002-02-28 enh Bracknell
+ Modified the errors window to make grep/compiler-error style addresses
  look like hyperlinks. Clicking on one does the obvious thing.
+ Fixed a bug that caused ETextWindow.jumpToAddress to go to the wrong
  lines (my text window stuff counted lines from a different offset to
  Sun's, so now we need to convert human-readable offset 1 line numbers
  to Sun-preferred offset 0 line numbers).
+ Accidentally deleted EDirectoryWindow.java; restored from last upload,
  with what I think were the only intervening changes reapplied. May be
  some regression here though. I really should read the cvs man page and
  start using it...
+ Set the text area documents' tab size to 2, which is reasonably close to the
  width of four spaces. Whatever the widest glyph is in this font, it's twice as
  wide as a space, which looking at ' ' and 'W' seems plausible.
+ Fixed a bug with links in the errors window that don't have a space.
+ Removed debugging output from cursor-changing code now it works.
+ Had a play with alternative ways of specifying the backspace mapping; it
  looks like we might have to use something different depending on the
  operating system. I think OS X is 'wrong' in that they thought that
  "typed BACK_SPACE" was superior to "typed \010" -- and I'm inclined to
  agree -- but didn't realize that it means you're in danger of getting two
  responses to the backspace key on the system you didn't develop for...

2002-02-27 enh Bracknell
+ All search highlights are now removed if you remove the search string.
+ Fixed the find dialog to jump to the next match, rather than the first match.
+ Added undo and redo functionality. It's a bit simplistic at the moment, and
  I've no idea what its impact on memory consumption is, but it would be easy
  to fix ETextArea so as not to offer undo/redo.

2002-02-26 enh Bracknell
+ Added a count of matches to the find dialog.
+ Fixed the problem with last-modified times; it was the usual Java I/O mistake
  of not remembering to invoke close.
+ Made the find dialog jump to the first match.
+ Fixed the bug that would make the jumping code happily jump to offsets before
  the start or after the end of the text.

2002-02-22 enh Bracknell
+ Removed insert-brace-pair.
+ Fixed insert-newline to auto-indent.
+ Made deletion more intelligent w.r.t. 4-space tabs.
+ I think text entry/deletion behavior is now sensible enough to be usable.
+ Disabled quad-click 'select all'. What use was that?
+ Gave the errors window 20% of the space, not 10%.
+ Moved the (still inactive!) guide line to the bottom of the errors window to
  interact better with the intrusive grow box on Mac OS X. Scrolling a JTextArea
  under that space didn't seem to work all that well.
+ Fixed "Use as Guide", which had been disabled since the move to JList
  directory displays.

2002-02-21 enh Bracknell
+ Got rid of EAction.
+ Fixed "Save" on the text menu.
+ Fixed the errors window menu.
+ Fixed the directory menu.

2002-02-20 enh Bracknell
+ Fixed double-click next to a true bracket character so that it selects as before,
  which is to say next to a bracket rather than on a bracket. (Who needs the hassle
  of accurately targetting a teensy-weensy little bracket character when there's so
  often a whole raft of right margin just waiting to be clicked?)
+ Made a stab at painting the selection the same way as old Edit: where a multiline
  selection made it clear that the newline was part of the selection (or not, as the
  case may be).
+ Got the popup menus working again. Only put the Open and Execute items back
  on the menu because I want an early night. Should be easy, though.

2002-02-19 enh Bracknell
+ Got told it's time to say farewell to my prepuce.
+ Fixed bracket matching for true brackets (not "" pairs). It's not quite right, but
  it's the best I can manage right now.

2002-02-18 enh Bracknell
+ Made the errors window automatically scroll to the bottom when new output
  appears.
+ Made the text area font configuration work again.
+ Made the selection visible when goto-line is used, gave focus back to the text.
+ Made goto-line show the line in the middle of the viewport.
+ Fixed insert-tab so it replaces the selection, rather than literally inserting.
+ Fixed double-clicking, triple-clicking and quadruple-clicking. Double-clicking
  to select a bracketed expression doesn't work yet though. That was never right
  in old Edit, and I'm hoping I'll do it right this time rather than port the old code!
+ Made the close button line up better with the scrollbar on Mac OS X. It's still
  at a hard-coded offset though. Portability, schmortability.
+ This is still such gobshite, though. Where's the Java refactoring browser I ought
  to be spending my time writing? Or the intentional programming system?
  What a fucking waste...

2002-02-17 enh Bracknell
+ Switched to using a subclassed JTextArea. So now we finally have both real
  scrollbars and line wrapping.
+ Disabled all broken features.
+ Fixed document-dirtiness monitoring.
+ Fixed the C-S save-file action. (In the process switching to using Keymaps
  and Actions. My code will correctly use the appropriate Ctrl or Command key.)
+ Fixed the C-W close-window action. (Sooner or later I imagine reading keyboard
  mappings from a file, at which time I'll think again about how to only offer
  this on Mac OS X.)
+ Fixed the tab behavior (to be the same as before, rather than perfect!)
+ Added automatic brace-completion as in Apple's ProjectBuilder. I really love
  this! Sadly, mine's a bit over-eager because it doesn't check that your brace
  isn't a character literal, string literal or comment.
+ Fixed auto-indent.
+ Fixed the errors window. (That's the first time it's been working on my
  home copy of Edit in weeks, though without the menu it's not very useful!)
+ Fixed the 'find' and 'goto' dialogs. The goto dialog doesn't work very well
  because the code to scroll to a line isn't working right. I remember having
  trouble with this before with JTextArea, but I can't remember what the trick
  was.
+ Modified the 'find' dialog to use a Highlighter to highlight in yellow all
  the matches. This makes up somewhat for not being able to jump between the
  matches, and is something I wanted to do in the longer term anyway.
+ Made the dialogs appear at a reasonable size, rather than as just a titlebar
  as it's been for a while now.

2002-02-10 enh Bracknell
+ Modified InputHandler to make the Windows/Mac OS X Ctrl/Command
  split more transparent. Everything's now done in keyPressed, with
  keyTyped gone. This, happily enough, brings us closer to replacing that
  whole mess with a nicer system. But not yet. There's still that whole
  scroll-bar business to sort out...

2002-02-07 enh Bracknell
+ Removed some of the old scrollbar code from ETextWindow. Commented
  out other bits. At the moment it behaves a bit strangely because if Edit wants
  to scroll, it talks to the TextAreaPainter and modifies it directly, rather than
  talking to the JScrollPane. This is still the case in the drag-scrolling, for
  example.
+ Fixed 'Del' (fn-Backspace) for Mac OS X. It used to insert \u007f after
  doing the right thing.

2002-02-05 enh Bracknell
+ I'd forgotten I'd started the move to native scrollbars. Half way through
  doing something else I suddenly realized. So obviously Edit's not that
  broken if you don't have lines that would need wrapping! Anyway, one
  thing that was annoying was not implementing the Scrollable interface
  to ensure the scrollbar increments are reasonable for text. Now done.
+ Made a mess of moving to native dialogs. Remembered all the reasons
  why we didn't want to use them! The OS X shadow effect looks cool, but
  that's about all I can say. Funnily, the very thing that had been bothering
  me on Windows -- that the dialogs are way too tight -- now bothers me
  on OS X more than it did with the fake dialogs, perhaps because Aqua
  usually uses so much white space. "Something must be done!", as they
  say. But not tonight.

2002-01-31 enh Bracknell
+ First stab at using JScrollPane for the text windows. TextBuffer now keeps
  track of how many newlines it contains. [It occurs to me having seen that
  code again that deletion of a single character is grossly inefficient. Is that
  why holding down backspace seems so sluggish?] Lots of work still to do,
  but for now I'm still fairly confident that this is the way to go. I'll miss line
  wrapping though...

2002-01-30 enh Bracknell
+ Fixed the behavior of the left and right cursor keys (properly this time!).
+ Changed the EditServer protocol to be something akin to HTTP/1.1 so
  that I can use a web browser to tell Edit to load a file.
+ Fixed a bug in the TextAreaPainter runs code that meant real tabs
  weren't handled correctly.

2002-01-27 enh Bracknell
+ Made TextAreaPainter try to write runs of characters, rather than one
  character a time. Performance was good enough, but -- to be frank -- pretty
  ropey. This simple expedient seems to make quite a difference, particularly
  to Edit's ability to keep up with what you've typed. (Of course, I'd be
  able to tell better if iTunes weren't taking 80% CPU time encoding MP3s
  of every CD I've got! At least Edit doesn't seem much worse off than vi.)
  Are there any other quick & easy ways to improve performance? If there are,
  I want them. If there aren't, I want to look at is the feasability of doing
  things completely differently: ditching wrapping, using JScrollPane, keeping
  track of the number of lines in the TextBuffer so we can present a normal
  scrollbar, making use of easy line/coordinate mapping to only repaint
  relevant areas rather than the whole window, and generally being as fast as
  all those other text editors!
+ Added code to set native look & feel now we're starting to use JScrollPane,
  otherwise Windows looks terrible.
+ Modified EDirectoryWindow to put directories first. This reduces the amount
  of scrolling necessary if you're traversing a directory structure.

2002-01-24 enh Bracknell
+ Switched to JList & JScrollPane for directory displays.
+ Added .obj to the ignored extensions for when I'm working on PuTTY.
+ Made left and right cursor behave like Windows and Mac OS if there's
  a selection.

2002-01-23 enh Bracknell
+ Now opens a workspace corresponding to the current directory.
+ Tried to add support for a standard "About Edit" menu item, but it doesn't seem to
  work.

2002-01-16 enh Bracknell
+ Modified the appearance of ETextWindow and EDialog: a text window now has a plain
  background & dialogs now have paper-effect backgrounds, as with Mac OS X.
+ You can now give width & height as +ve or -ve, and so can implicitly attach
  the window to the edges of the screen, which is probably the wanted behavior. This
  is mostly like X11 geometry specifications but not quite because at the moment
  you have to use -1 to mean -0 because the implementation uses ints rather than Strings.

2002-01-04 enh Bracknell
+ Fixed saving to update last modified time: no more spurious warnings about the file
  having changed since it was (first!) loaded.
+ Generalized and factored out the code for finding a Makefile used by C-B, and used
  it to search for a keyboard file if the properties file entry doesn't start with a
  slash. (We still need a good cross-platform test for an absolute pathname...)
+ A first crack at better cursor-key vertical scrolling. The new scheme moves just a
  single line up if moving up, and moves just far enough down to ensure that the caret
  position is visible if moving down. This does nothing to improve the speed, but I
  don't think it makes it appreciably worse. The over-eagerness at scrolling down is
  much improved, but still not perfect. Our whole way of doing things is a bad fit with
  this kind of interface. It's interesting to see yet again the extent to which
  implementation & interface are dictated by one another...

2002-01-03 enh Bracknell
+ Added a keyboard shortcut to close the current window. This is Command-W on the Mac,
  and with the current scheme for collapsing Ctrl and Command, that means that on all
  platforms Ctrl-W now closes the current window, which is probably only really right
  for the Mac. This doesn't bother me greatly at the moment, but we'll see how it works
  out.
+ If you go to a line number, then re-open the goto dialog, it used to show the line
  after the one you're expecting because it used the line containing the *end*
  of the selection, not the start. Fixed.
+ Focus is now given to the first text component in a dialog, regardless of how
  components are nested within containers. All of Edit's dialogs now have keyboard
  focus in the right place by default.
+ A properties file with no invalid roots for workspaces no longer renders Edit
  unusable, so you can now fix Edit's configuration using Edit rather than having
  to resort to notepad or vi.
+ Changed what happens if a file is modified behind Edit's back: the user is now at
  least told that this has happened, even if they're left on their own as to sorting
  it out.
